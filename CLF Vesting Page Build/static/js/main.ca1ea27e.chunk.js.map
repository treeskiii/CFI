{"version":3,"sources":["utils/provider.ts","utils/formatBalance.ts","utils/constants.ts","serene-finance/SereneFinance.ts","contexts/SereneFinance/SereneFinanceProvider.tsx","contexts/Modals/Modals.tsx","config.ts","state/application/actions.ts","hooks/useNetworkPrompt.ts","state/transactions/reducer.ts","state/application/reducer.ts","state/index.ts","theme/colors.ts","theme/index.ts","newTheme.js","hooks/useIsWindowVisible.ts","state/application/updater.ts","hooks/useDebounce.ts","state/transactions/updater.tsx","state/Updaters.tsx","components/Loader/index.js","components/Loader/Loader.js","components/Popups/TransactionPopup.tsx","components/Popups/ErrorPopup.tsx","components/Popups/PopupItem.tsx","components/Popups/index.tsx","App.tsx","serviceWorker.js","index.tsx","state/transactions/actions.ts","serene-finance/config.ts","serene-finance/ether-utils.ts","state/application/hooks.ts"],"names":["getDefaultProvider","ethers","providers","Web3Provider","web3ProviderFrom","config","defaultProvider","chainId","getDisplayBalance","balance","decimals","fractionDigits","isTruncated","number","getBalance","ret","toFixed","length","slice","getFullDisplayBalance","Number","div","BigNumber","from","pow","SPOOKY_ROUTER_ADDR","SereneFinance","cfg","myAccount","provider","signer","contracts","externalTokens","masonryVersionOfUser","AFISH_ETH_LP","WHALE_FISH_LP","aFish","whale","FTM","FISH","MAGIK","deployments","this","Object","entries","name","deployment","Contract","address","abi","account","newProvider","getSigner","contract","connect","console","log","a","SereneWethRewardPool","totalSupply","supply","getTokenPriceInFish","priceInWETH","geaFishPriceFromLp","priceOfOneWETH","priceOfTombInDollars","tokenInFtm","priceInDollars","decimal","circulatingSupply","lpToken","lpTokenSupplyBN","lpTokenSupply","token0","startsWith","isTomb","balanceOf","tokenAmountBN","tokenAmount","ftmAmountBN","ftmAmount","tokenAmountInOneLP","ftmAmountInOneLP","getLPTokenPrice","lpTokenPrice","lpTokenPriceFixed","toString","liquidity","priceOfOne","totalLiquidity","VestingContract","getGrantAmount","totalClaim","getTotalClaimed","claimed","getVestedTokens","claimable","ShareRewardPool","priceInFTM","lpRewardPoolSupply","pebbleCirculatingSupply","sub","priceOfOneFTM","priceOfSharesInDollars","SeigniorageOracle","GenesisPool","twap","utils","parseEther","expectedPrice","GenesisPoolSupply","sereneCirculatingSupply","Treasury","getPegUpdatedPrice","bank","undefined","depositToken","poolContract","getDepositTokenPriceInDollars","depositTokenName","depositTokenPrice","stakeInPool","TVL","earnTokenName","getSereneV2Stat","getPebbleStat","stat","getTokenPerSecond","tokenPerSecond","tokenPerHour","mul","totalRewardPricePerYear","totalRewardPricePerDay","totalStakingTokenInPool","dailyAPR","yearlyAPR","contractName","govPerSecond","afishPerSecond","rewardPerSecond","totalAllocPoint","totalAlloc","poolInfo","sereneLp","pblLp","tombStat","getBondPremiumRate","bondTombRatio","modifier","bondPriceInFTM","priceOfTBondInDollars","displayedTotalSupply","tokenName","token","priceOfOneWethInDollars","tokenPrice","includes","getExtraLPTokenPrice","epoch","amount","getTombPrice","treasuryTombPrice","buyBonds","decimalToBalance","priceForTomb","redeemBonds","swapper","exchange","totalValue","values","bankDefinitions","bankInfo","pool","tokenAmountInPool","value","poolValue","isNaN","PBLPrice","currentMasonry","masonrypebbleBalanceOf","masonryTVL","tokenSupply","priceOfToken","tokenInLP","token1","isWETH","token1Supply","getWETHPrice","ready","WETH","USDC","fusdt_wftm_lp_pair","ftm_amount_BN","ftm_amount","fusdt_amount_BN","fusdt_amount","error","poolName","poolId","pendingAFISH","pendingShare","stack","userInfo","getWithdrawFeeOf","deposit","claimVestedTokens","withdraw","Masonry","allocateSeigniorage","tokenContract","usdc","Token","symbol","Fetcher","fetchPairData","wftmToToken","priceInBUSD","Route","midPrice","wftm","lpContract","tokenAmountS","nativeAmountS","nativeAmount","latestSnapshotIndex","masonryHistory","lastHistory","lastRewardsReceived","SRNPrice","amountOfRewardsPerDay","realAPR","canClaimReward","canWithdraw","getStakedSharesOnMasonry","stakedAmount","notStaked","result","isOldMasonryMember","Error","stake","getPebbleOf","getCashEarningsOf","earned","claimDividends","claimReward","exit","nextEpochPoint","nextEpochTimestamp","nextAllocation","Date","toNumber","prevAllocation","now","to","currentEpoch","masons","mason","startTimeEpoch","epochTimerStart","PERIOD","period","periodInHours","rewardLockupEpochs","targetEpochForClaimUnlock","fromDate","toDate","delta","endDate","moment","add","PeriodInHours","withdrawLockupEpochs","assetName","window","ethereum","networkVersion","asset","assetUrl","request","method","params","type","options","image","treasuryDaoFundedFilter","filters","DaoFundFunded","treasuryDevFundedFilter","DevFundFunded","treasuryMasonryFundedFilter","MasonryFunded","queryFilter","masonryFundEvents","events","forEach","index","push","masonryFund","args","devFund","daoFund","lpName","zapper","estimateZapIn","parseUnits","estimate","estimateZapInToken","overrides","zapIn","zapInToken","Context","createContext","sereneFinance","SereneFinanceProvider","children","useWallet","useState","setSereneFinance","useEffect","unlockWallet","serene","Provider","onPresent","onDismiss","StyledModalWrapper","styled","StyledModalBackdrop","Modals","isOpen","setIsOpen","content","setContent","handlePresent","useCallback","modalContent","handleDismiss","onClick","React","isValidElement","cloneElement","configurations","development","networkName","ftmscanUrl","require","WFTM","SERENE","baseLaunchDate","bondLaunchesAt","masonryLaunchesAt","refreshInterval","FISHGENPOOL","sectionInUI","finished","sort","closedForStaking","FISHUSDCGENPOOL","FISHWETHGENPOOL","WETHUSDCGENPOOL","WBTCWETHGENPOOL","USDCDAIGENPOOL","FRAXUSDCGENPOOL","USDCUSDTGENPOOL","AFISHLPPOOL","WHALELPGENPOOL","updateBlockNumber","createAction","toggleWalletModal","toggleSettingsMenu","addPopup","removePopup","usePromptNetwork","networkPrompt","setNetworkPrompt","connectToNetwork","getTime","createReducer","builder","addCase","addTransaction","transactions","payload","hash","approval","summary","txs","addedTime","clearAllTransactions","checkedTransaction","blockNumber","tx","lastCheckedBlockNumber","Math","max","finalizeTransaction","receipt","confirmedTime","popupList","walletModalOpen","settingsMenuOpen","state","action","key","removeAfterMs","filter","popup","concat","nanoid","show","p","PERSISTED_KEYS","store","configureStore","reducer","application","middleware","getDefaultMiddleware","thunk","save","states","preloadedState","load","teal","200","theme","borderRadius","color","black","grey","100","300","400","500","600","700","800","900","purple","primary","light","main","secondary","white","siteWidth","spacing","1","2","3","4","5","6","7","topBarSize","newTheme","createMuiTheme","palette","text","background","default","paper","dark","contrastText","disabledBackground","active","hover","typography","fontFamily","join","VISIBILITY_STATE_SUPPORTED","document","isWindowVisible","visibilityState","Updater","dispatch","useDispatch","windowVisible","focused","setFocused","listener","addEventListener","removeEventListener","useIsWindowVisible","setState","blockNumberCallback","getBlockNumber","then","catch","on","removeListener","debouncedState","delay","debouncedValue","setDebouncedValue","handler","setTimeout","clearTimeout","useDebounce","lastBlockNumber","useBlockNumber","useSelector","useAddPopup","keys","blocksSinceCheck","minutesPending","shouldCheck","getTransactionReceipt","blockHash","contractAddress","status","transactionHash","transactionIndex","txn","success","Updaters","Loader","style","position","left","top","transform","Typography","RowNoFlex","TransactionPopup","useContext","ThemeContext","paddingRight","size","StyledPopupDesc","StyledLink","target","href","span","props","ErrorPopup","message","copyErrorDetails","navigator","clipboard","writeText","StyledClose","X","Popup","Fader","AnimatedFader","animated","PopupItem","popKey","useRemovePopup","removeThisPopup","timeout","popupContent","faderStyle","useSpring","width","duration","text2","MobilePopupWrapper","height","MobilePopupInner","FixedPopupColumn","Popups","activePopups","useActivePopups","map","item","reverse","Home","lazy","Providers","connectors","walletconnect","rpcUrl","App","localStorage","version_app","clear","setItem","fallback","Boolean","location","hostname","match","ReactDOM","render","StrictMode","getElementById","serviceWorker","registration","unregister","defaultEthereumConfig","testing","autoGasMultiplier","defaultConfirmations","defaultGas","defaultGasPrice","ethereumNodeTimeout","endpoint","ethConfig","assign","Web3","WebsocketProvider","HttpProvider","d","String","list","useMemo"],"mappings":"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","file":"static/js/main.ca1ea27e.chunk.js","sourcesContent":["import { ethers } from 'ethers';\r\nimport config from '../config';\r\nimport { web3ProviderFrom } from '../serene-finance/ether-utils';\r\n\r\nexport function getDefaultProvider(): ethers.providers.Web3Provider {\r\n  return new ethers.providers.Web3Provider(web3ProviderFrom(config.defaultProvider), config.chainId);\r\n}\r\n","import { BigNumber } from 'ethers';\r\n\r\nexport const getDisplayBalance = (\r\n  balance: BigNumber,\r\n  decimals = 18,\r\n  fractionDigits = 4,\r\n  isTruncated: boolean = false,\r\n) => {\r\n  if (decimals === 0) {\r\n    fractionDigits = 0;\r\n  }\r\n  const number = getBalance(balance, decimals - fractionDigits);\r\n  const ret = (number / 10 ** fractionDigits).toFixed(fractionDigits);\r\n  if (ret.length > 12 && isTruncated) {\r\n    return ret.slice(0, 12) + '...';\r\n  }\r\n  return ret;\r\n};\r\n\r\nexport const getFullDisplayBalance = (balance: BigNumber, decimals = 18, isTruncated = false) => {\r\n  return getDisplayBalance(balance, decimals, 4, isTruncated);\r\n};\r\n\r\nexport function getBalance(balance: BigNumber, decimals = 18): number {\r\n  return Number(balance.div(BigNumber.from(10).pow(decimals)));\r\n}\r\n","export const SRN_TICKER = 'SRN';\r\nexport const PBL_TICKER = 'PBL';\r\nexport const TBOND_TICKER = 'TBOND';\r\nexport const FTM_TICKER = 'FTM';\r\nexport const WFTM_TICKER = 'WFTM';\r\nexport const SPOOKY_ROUTER_ADDR = '0xF491e7B69E4244ad4002BC14e878a34207E38c29';\r\nexport const ZAPPER_ROUTER_ADDR = '0x8bb1fe7a50082623b372d857b4d07911c786a3e9';\r\n","import { Fetcher, Route, Token } from '@traderjoe-xyz/sdk';\r\nimport { Configuration } from './config';\r\nimport { ContractName, TokenStat, AllocationTime, LPStat, Bank, PoolStats, VestingStat } from './types';\r\nimport { BigNumber, Contract, ethers } from 'ethers';\r\nimport { decimalToBalance } from './ether-utils';\r\nimport { TransactionResponse } from '@ethersproject/providers';\r\nimport ERC20 from './ERC20';\r\nimport { getFullDisplayBalance, getDisplayBalance, getBalance } from '../utils/formatBalance';\r\nimport { getDefaultProvider } from '../utils/provider';\r\nimport IUniswapV2PairABI from './IUniswapV2Pair.abi.json';\r\nimport config, { bankDefinitions } from '../config';\r\nimport moment from 'moment';\r\nimport { parseUnits } from 'ethers/lib/utils';\r\nimport { FTM_TICKER, SPOOKY_ROUTER_ADDR, SRN_TICKER } from '../utils/constants';\r\n/**\r\n * An API module of AFish Finance contracts.\r\n * All contract-interacting domain logic should be defined in here.\r\n */\r\nexport class SereneFinance {\r\n  myAccount: string;\r\n  provider: ethers.providers.Web3Provider;\r\n  signer?: ethers.Signer;\r\n  config: Configuration;\r\n  contracts: { [name: string]: Contract };\r\n  externalTokens: { [name: string]: ERC20 };\r\n  masonryVersionOfUser?: string;\r\n\r\n  AFISH_ETH_LP: ERC20;\r\n  WHALE_FISH_LP: ERC20;\r\n  aFish: ERC20;\r\n  whale: ERC20;\r\n  FTM: ERC20;\r\n  FISH: ERC20;\r\n  MAGIK: ERC20;\r\n\r\n  constructor(cfg: Configuration) {\r\n    const { deployments, externalTokens } = cfg;\r\n    const provider = getDefaultProvider();\r\n\r\n    // loads contracts from deployments\r\n    this.contracts = {};\r\n    for (const [name, deployment] of Object.entries(deployments)) {\r\n      this.contracts[name] = new Contract(deployment.address, deployment.abi, provider);\r\n    }\r\n    // this.externalTokens = {};\r\n    // for (const [symbol, [address, decimal]] of Object.entries(externalTokens)) {\r\n    //   this.externalTokens[symbol] = new ERC20(address, provider, symbol, decimal);\r\n    // }\r\n    // this.aFish = new ERC20(deployments.afish.address, provider, 'aFish');\r\n    // this.whale = new ERC20(deployments.whale.address, provider, 'whale');\r\n    // this.AFISH_ETH_LP = new ERC20(externalTokens['AFISH-FISH-LP'][0], provider, 'AFISH-FISH-LP');\r\n    // this.WHALE_FISH_LP = new ERC20(externalTokens['WHALE-FISH-LP'][0], provider, 'WHALE-FISH-LP');\r\n    // this.FTM = this.externalTokens['WFTM'];\r\n    // this.FISH = this.externalTokens['FISH'];\r\n\r\n    this.config = cfg;\r\n    this.provider = provider;\r\n  }\r\n\r\n  /**\r\n   * @param provider From an unlocked wallet. (e.g. Metamask)\r\n   * @param account An address of unlocked wallet account.\r\n   */\r\n  unlockWallet(provider: any, account: string) {\r\n    const newProvider = new ethers.providers.Web3Provider(provider, this.config.chainId);\r\n    this.signer = newProvider.getSigner(0);\r\n    this.myAccount = account;\r\n    for (const [name, contract] of Object.entries(this.contracts)) {\r\n      this.contracts[name] = contract.connect(this.signer);\r\n    }\r\n    // const tokens = [this.aFish, this.whale, ...Object.values(this.externalTokens)];\r\n    // for (const token of tokens) {\r\n    //   token.connect(this.signer);\r\n    // }\r\n    console.log(`🔓 Wallet is unlocked. Welcome, ${account}!`);\r\n    // this.fetchMasonryVersionOfUser()\r\n    //   .then((version) => (this.masonryVersionOfUser = version))\r\n    //   .catch((err) => {\r\n    //     console.error(`Failed to fetch masonry version: ${err.stack}`);\r\n    //     this.masonryVersionOfUser = 'latest';\r\n    //   });\r\n  }\r\n\r\n  get isUnlocked(): boolean {\r\n    return !!this.myAccount;\r\n  }\r\n\r\n  //===================================================================\r\n  //===================== GET ASSET STATS =============================\r\n  //===================FROM SPOOKY TO DISPLAY =========================\r\n  //=========================IN HOME PAGE==============================\r\n  //===================================================================\r\n\r\n  // async getSereneStat(): Promise<TokenStat> {\r\n  //   const { SereneWethRewardPool } = this.contracts;\r\n  //   const supply = await this.SRN.totalSupply();\r\n  //   const sereneRewardPoolSupply = await this.SRN.balanceOf(SereneWethRewardPool.address);\r\n  //   const sereneCirculatingSupply = supply.sub(sereneRewardPoolSupply);\r\n  //   const priceInWETH = await this.getTokenPriceFromPancakeswap(this.SRN);\r\n  //   const priceOfOneWETH = await this.geaFishPriceFromLp();\r\n  //   const priceOfTombInDollars = (Number(priceInWETH) * Number(priceOfOneWETH)).toFixed(2);\r\n\r\n  //   return {\r\n  //     tokenInFtm: priceInWETH,\r\n  //     priceInDollars: priceOfTombInDollars,\r\n  //     totalSupply: getDisplayBalance(supply, this.SRN.decimal, 0),\r\n  //     circulatingSupply: getDisplayBalance(sereneCirculatingSupply, this.SRN.decimal, 0),\r\n  //   };\r\n  // }\r\n\r\n  // async get2ombStat(): Promise<TokenStat> {\r\n  //   const { SereneWethRewardPool } = this.contracts;\r\n  //   const supply = await this.externalTokens['2OMB'].totalSupply();\r\n  //   const sereneRewardPoolSupply = await this.externalTokens['2OMB'].balanceOf(SereneWethRewardPool.address);\r\n  //   const sereneCirculatingSupply = supply.sub(sereneRewardPoolSupply);\r\n  //   const priceInWETH = await this.getTokenPriceFromRedemption(this.externalTokens['2OMB']);\r\n  //   const priceOfOneWETH = await this.getWFTMPriceFromPancakeswap();\r\n  //   const priceOfTombInDollars = (Number(priceInWETH) * Number(priceOfOneWETH)).toFixed(2);\r\n\r\n  //   return {\r\n  //     tokenInFtm: priceInWETH,\r\n  //     priceInDollars: priceOfTombInDollars,\r\n  //     totalSupply: getDisplayBalance(supply, this.externalTokens['2OMB'].decimal, 0),\r\n  //     circulatingSupply: getDisplayBalance(sereneCirculatingSupply, this.externalTokens['2OMB'].decimal, 0),\r\n  //   };\r\n  // }\r\n\r\n  // async get3ombStat(): Promise<TokenStat> {\r\n  //   const { SereneWethRewardPool } = this.contracts;\r\n  //   const supply = await this.externalTokens['3OMB'].totalSupply();\r\n  //   const sereneRewardPoolSupply = await this.externalTokens['3OMB'].balanceOf(SereneWethRewardPool.address);\r\n  //   const sereneCirculatingSupply = supply.sub(sereneRewardPoolSupply);\r\n  //   const priceInWETH = await this.getTokenPriceFromPancakeswap(this.externalTokens['3OMB']);\r\n  //   const priceOfOneWETH = await this.geaFishPriceFromLp();\r\n  //   const priceOfTombInDollars = (Number(priceInWETH) * Number(priceOfOneWETH)).toFixed(2);\r\n\r\n  //   return {\r\n  //     tokenInFtm: priceInWETH,\r\n  //     priceInDollars: priceOfTombInDollars,\r\n  //     totalSupply: getDisplayBalance(supply, this.externalTokens['3OMB'].decimal, 0),\r\n  //     circulatingSupply: getDisplayBalance(sereneCirculatingSupply, this.externalTokens['3OMB'].decimal, 0),\r\n  //   };\r\n  // }\r\n\r\n  async getSereneV2Stat(): Promise<TokenStat> {\r\n    const { SereneWethRewardPool } = this.contracts;\r\n    const supply = await this.aFish.totalSupply();\r\n    // const priceInWETH = await this.getTokenPriceFromPancakeswap(this.aFish);\r\n    const priceInWETH = await this.getTokenPriceInFish(this.aFish, this.AFISH_ETH_LP);\r\n    const priceOfOneWETH = await this.geaFishPriceFromLp();\r\n    //const priceInWETH = 0;\r\n    //const priceOfOneWETH = 0;\r\n    const priceOfTombInDollars = (Number(priceInWETH) * Number(priceOfOneWETH)).toFixed(2);\r\n\r\n    return {\r\n      tokenInFtm: priceInWETH,\r\n      priceInDollars: priceOfTombInDollars,\r\n      totalSupply: getDisplayBalance(supply, this.aFish.decimal, 0),\r\n      circulatingSupply: getDisplayBalance(supply, this.aFish.decimal, 0),\r\n    };\r\n  }\r\n\r\n  /**\r\n   * Calculates various stats for the requested LP\r\n   * @param name of the LP token to load stats for\r\n   * @returns\r\n   */\r\n  async getLPStat(name: string): Promise<LPStat> {\r\n    const lpToken = this.externalTokens[name];\r\n    const { externalTokens } = this.config;\r\n    const lpTokenSupplyBN = await lpToken.totalSupply();\r\n    const lpTokenSupply = getDisplayBalance(lpTokenSupplyBN, 18);\r\n    const token0 = name.startsWith('AFISH') ? this.aFish : this.whale;\r\n    const isTomb = name.startsWith('AFISH');\r\n    const tokenAmountBN = await token0.balanceOf(lpToken.address);\r\n    const tokenAmount = getDisplayBalance(tokenAmountBN, 18);\r\n    const ftmAmountBN = await this.FISH.balanceOf(lpToken.address);\r\n    const ftmAmount = getDisplayBalance(ftmAmountBN, 18);\r\n    const tokenAmountInOneLP = Number(tokenAmount) / Number(lpTokenSupply);\r\n    const ftmAmountInOneLP = Number(ftmAmount) / Number(lpTokenSupply);\r\n    const lpTokenPrice = await this.getLPTokenPrice(lpToken, token0, isTomb);\r\n    const lpTokenPriceFixed = Number(lpTokenPrice).toFixed(2).toString();\r\n    const liquidity = (Number(lpTokenSupply) * Number(lpTokenPrice)).toFixed(2).toString();\r\n    return {\r\n      tokenAmount: tokenAmountInOneLP.toFixed(2).toString(),\r\n      ftmAmount: ftmAmountInOneLP.toFixed(2).toString(),\r\n      priceOfOne: lpTokenPriceFixed,\r\n      totalLiquidity: liquidity,\r\n      totalSupply: Number(lpTokenSupply).toFixed(2).toString(),\r\n    };\r\n  }\r\n  async getVestingStat(): Promise<VestingStat> {\r\n    const { VestingContract} = this.contracts;\r\n    const totalClaim = Number(getDisplayBalance(await VestingContract.getGrantAmount(this.myAccount),18)).toFixed(2);\r\n    const claimed = Number(getDisplayBalance(await VestingContract.getTotalClaimed(this.myAccount),18)).toFixed(2);\r\n    const claimable = Number(getDisplayBalance(await VestingContract.getVestedTokens(this.myAccount),18)).toFixed(2);\r\n    return {\r\n      totalClaim:totalClaim,\r\n      claimed: claimed,\r\n      claimable: claimable\r\n    };\r\n  }\r\n\r\n  // async get23LPStat(name: string): Promise<LPStat> {\r\n  //   const lpToken = this.externalTokens[name];\r\n  //   const { externalTokens } = this.config;\r\n  //   const lpTokenSupplyBN = await lpToken.totalSupply();\r\n  //   const lpTokenSupply = getDisplayBalance(lpTokenSupplyBN, 18);\r\n  //   const token0 = name.startsWith('2OMB') ? this.externalTokens['2OMB'] : this.externalTokens['3OMB'];\r\n  //   const isTomb = name.startsWith('2OMB');\r\n  //   const tokenAmountBN = await token0.balanceOf(lpToken.address);\r\n  //   const tokenAmount = getDisplayBalance(tokenAmountBN, 18);\r\n\r\n  //   const ftmAmountBN = await this.FTM.balanceOf(lpToken.address);\r\n  //   const ftmAmount = getDisplayBalance(ftmAmountBN, 18);\r\n  //   const tokenAmountInOneLP = Number(tokenAmount) / Number(lpTokenSupply);\r\n  //   const ftmAmountInOneLP = Number(ftmAmount) / Number(lpTokenSupply);\r\n  //   const lpTokenPrice = await this.getLPTokenPrice(lpToken, token0, isTomb);\r\n  //   const lpTokenPriceFixed = Number(lpTokenPrice).toFixed(2).toString();\r\n  //   const liquidity = (Number(lpTokenSupply) * Number(lpTokenPrice)).toFixed(2).toString();\r\n  //   return {\r\n  //     tokenAmount: tokenAmountInOneLP.toFixed(2).toString(),\r\n  //     ftmAmount: ftmAmountInOneLP.toFixed(2).toString(),\r\n  //     priceOfOne: lpTokenPriceFixed,\r\n  //     totalLiquidity: liquidity,\r\n  //     totalSupply: Number(lpTokenSupply).toFixed(2).toString(),\r\n  //   };\r\n  // }\r\n\r\n  /**\r\n   * @returns TokenStat for PBL\r\n   * priceInFTM\r\n   * priceInDollars\r\n   * TotalSupply\r\n   * CirculatingSupply (always equal to total supply for bonds)\r\n   */\r\n  async getPebbleStat(): Promise<TokenStat> {\r\n    const { ShareRewardPool } = this.contracts;\r\n\r\n    const supply = await this.whale.totalSupply();\r\n\r\n    //const priceInFTM = await this.getTokenPriceFromPancakeswap(this.whale);\r\n    const priceInFTM = await this.getTokenPriceInFish(this.whale,this.WHALE_FISH_LP);\r\n    const lpRewardPoolSupply = await this.whale.balanceOf(ShareRewardPool.address);\r\n\r\n    const pebbleCirculatingSupply = supply.sub(lpRewardPoolSupply);\r\n    const priceOfOneFTM = await this.geaFishPriceFromLp();\r\n    //const priceOfOneFTM = 0;\r\n    const priceOfSharesInDollars = (Number(priceInFTM) * Number(priceOfOneFTM)).toFixed(2);\r\n\r\n    return {\r\n      tokenInFtm: priceInFTM,\r\n      priceInDollars: priceOfSharesInDollars,\r\n      totalSupply: getDisplayBalance(supply, this.whale.decimal, 2),\r\n      circulatingSupply: getDisplayBalance(pebbleCirculatingSupply, this.whale.decimal, 2),\r\n    };\r\n  }\r\n\r\n  async getTombStatInEstimatedTWAP(): Promise<TokenStat> {\r\n    const { SeigniorageOracle, GenesisPool } = this.contracts;\r\n    const expectedPrice = await SeigniorageOracle.twap(this.aFish.address, ethers.utils.parseEther('1'));\r\n\r\n    const supply = await this.aFish.totalSupply();\r\n    const GenesisPoolSupply = await this.aFish.balanceOf(GenesisPool.address);\r\n    const sereneCirculatingSupply = supply.sub(GenesisPoolSupply);\r\n    return {\r\n      tokenInFtm: getDisplayBalance(expectedPrice),\r\n      priceInDollars: getDisplayBalance(expectedPrice),\r\n      totalSupply: getDisplayBalance(supply, this.aFish.decimal, 0),\r\n      circulatingSupply: getDisplayBalance(sereneCirculatingSupply, this.aFish.decimal, 0),\r\n    };\r\n  }\r\n\r\n  async getTombPriceInLastTWAP(): Promise<BigNumber> {\r\n    const { Treasury } = this.contracts;\r\n    return Treasury.getPegUpdatedPrice();\r\n  }\r\n\r\n  /**\r\n   * Calculates the TVL, APR and daily APR of a provided pool/bank\r\n   * @param bank\r\n   * @returns\r\n   */\r\n  async getPoolAPRs(bank: Bank): Promise<PoolStats> {\r\n    if (this.myAccount === undefined) return;\r\n    const depositToken = bank.depositToken;\r\n    // console.log(\"bank: \",depositToken);\r\n    const poolContract = this.contracts[bank.contract];\r\n    const depositTokenPrice = await this.getDepositTokenPriceInDollars(bank.depositTokenName, depositToken);\r\n    const stakeInPool = await depositToken.balanceOf(bank.address);\r\n    const TVL = Number(depositTokenPrice) * Number(getDisplayBalance(stakeInPool, depositToken.decimal, 18));\r\n    const stat = bank.earnTokenName === 'aFish' ? await this.getSereneV2Stat() : await this.getPebbleStat();\r\n    const tokenPerSecond = await this.getTokenPerSecond(\r\n      bank.earnTokenName,\r\n      bank.contract,\r\n      poolContract,\r\n      bank.depositTokenName,\r\n    );\r\n\r\n    const tokenPerHour = tokenPerSecond.mul(60).mul(60);\r\n    const totalRewardPricePerYear =\r\n      Number(stat.priceInDollars) * Number(getDisplayBalance(tokenPerHour.mul(24).mul(365)));\r\n    const totalRewardPricePerDay = Number(stat.priceInDollars) * Number(getDisplayBalance(tokenPerHour.mul(24)));\r\n    const totalStakingTokenInPool =\r\n      Number(depositTokenPrice) * Number(getDisplayBalance(stakeInPool, depositToken.decimal, 18));\r\n    const dailyAPR = (totalRewardPricePerDay / totalStakingTokenInPool) * 100;\r\n    const yearlyAPR = (totalRewardPricePerYear / totalStakingTokenInPool) * 100;\r\n    return {\r\n      dailyAPR: dailyAPR.toFixed(2).toString(),\r\n      yearlyAPR: yearlyAPR.toFixed(2).toString(),\r\n      TVL: TVL.toFixed(2).toString(),\r\n    };\r\n  }\r\n\r\n  /**\r\n   * Method to return the amount of tokens the pool yields per second\r\n   * @param earnTokenName the name of the token that the pool is earning\r\n   * @param contractName the contract of the pool/bank\r\n   * @param poolContract the actual contract of the pool\r\n   * @returns\r\n   */\r\n  async getTokenPerSecond(\r\n    earnTokenName: string,\r\n    contractName: string,\r\n    poolContract: Contract,\r\n    depositTokenName: string,\r\n  ) {\r\n    const rewardPerSecond = earnTokenName == 'whale' ? await poolContract.govPerSecond() : await poolContract.afishPerSecond();\r\n    const totalAlloc = await poolContract.totalAllocPoint();\r\n    if ( earnTokenName == 'whale'){\r\n      const sereneLp = (await poolContract.poolInfo(0))[\"allocPoint\"];\r\n      const pblLp = (await poolContract.poolInfo(1))[\"allocPoint\"];\r\n\r\n      if (depositTokenName === 'WHALE_FISH_LP') return rewardPerSecond.mul(pblLp).div(totalAlloc);\r\n      else if (depositTokenName === 'AFISH-FISH-LP') return rewardPerSecond.mul(sereneLp).div(totalAlloc);\r\n      else return rewardPerSecond.mul(0).div(totalAlloc);\r\n    }\r\n    else {\r\n      return rewardPerSecond.mul(1000).div(totalAlloc);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Use this method to get price for Tomb\r\n   * @returns TokenStat for TBOND\r\n   * priceInFTM\r\n   * priceInDollars\r\n   * TotalSupply\r\n   * CirculatingSupply (always equal to total supply for bonds)\r\n   */\r\n  async getBondStat(): Promise<TokenStat> {\r\n    const { Treasury } = this.contracts;\r\n    const tombStat = await this.getSereneV2Stat();\r\n    const bondTombRatio = await Treasury.getBondPremiumRate();\r\n    let modifier = 1; // keep to 1 if no bondPremium is to be used\r\n    if (getBalance(bondTombRatio, this.aFish.decimal) > 0) {\r\n      modifier = getBalance(bondTombRatio, this.aFish.decimal);\r\n    }\r\n    const bondPriceInFTM = (Number(tombStat.tokenInFtm) * modifier).toFixed(2);\r\n    const priceOfTBondInDollars = (Number(tombStat.priceInDollars) * modifier).toFixed(2);\r\n    const supply = await this.aFish.displayedTotalSupply();\r\n    return {\r\n      tokenInFtm: bondPriceInFTM,\r\n      priceInDollars: priceOfTBondInDollars,\r\n      totalSupply: supply,\r\n      circulatingSupply: supply,\r\n    };\r\n  }\r\n\r\n  /**\r\n   * Method to calculate the tokenPrice of the deposited asset in a pool/bank\r\n   * If the deposited token is an LP it will find the price of its pieces\r\n   * @param tokenName\r\n   * @param pool\r\n   * @param token\r\n   * @returns\r\n   */\r\n  async getDepositTokenPriceInDollars(tokenName: string, token: ERC20) {\r\n    let tokenPrice;\r\n    const priceOfOneWethInDollars = await this.geaFishPriceFromLp();\r\n    if (tokenName == 'FISH') {\r\n      tokenPrice = priceOfOneWethInDollars;\r\n    } else if (tokenName === 'AFISH-FISH-LP') {\r\n      tokenPrice = await this.getLPTokenPrice(token, this.aFish, true);\r\n    } else if (tokenName === 'WHALE-FISH-LP') {\r\n      tokenPrice = await this.getLPTokenPrice(token, this.whale, false);\r\n    } else if (tokenName === \"whale\") {\r\n      const priceInFTM = await this.getTokenPriceInFish(this.whale,this.WHALE_FISH_LP);\r\n      tokenPrice = (Number(priceInFTM) * Number(priceOfOneWethInDollars)).toString();\r\n    } else if (tokenName === \"aFish\") {\r\n      const priceInFTM = await this.getTokenPriceInFish(this.aFish,this.AFISH_ETH_LP);\r\n      tokenPrice = (Number(priceInFTM) * Number(priceOfOneWethInDollars)).toString();\r\n    } else if( tokenName.includes(\"LP\")){\r\n      if ( tokenName.includes(\"WETH\"))\r\n        tokenPrice = this.getExtraLPTokenPrice(token, this.externalTokens[\"WETH\"], true);\r\n      else if ( tokenName.includes(\"USDC\"))\r\n        tokenPrice = this.getExtraLPTokenPrice(token, this.externalTokens[\"USDC\"], false);\r\n        \r\n    }\r\n    return tokenPrice;\r\n  }\r\n\r\n  //===================================================================\r\n  //===================== GET ASSET STATS =============================\r\n  //=========================== END ===================================\r\n  //===================================================================\r\n\r\n  async getCurrentEpoch(): Promise<BigNumber> {\r\n    const { Treasury } = this.contracts;\r\n    return Treasury.epoch();\r\n  }\r\n\r\n  async getBondOraclePriceInLastTWAP(): Promise<BigNumber> {\r\n    const { Treasury } = this.contracts;\r\n    return Treasury.getBondPremiumRate();\r\n  }\r\n\r\n  /**\r\n   * Buy bonds with cash.\r\n   * @param amount amount of cash to purchase bonds with.\r\n   */\r\n  async buyBonds(amount: string | number): Promise<TransactionResponse> {\r\n    const { Treasury } = this.contracts;\r\n    const treasuryTombPrice = await Treasury.getTombPrice();\r\n    return await Treasury.buyBonds(decimalToBalance(amount), treasuryTombPrice);\r\n  }\r\n\r\n  /**\r\n   * Redeem bonds for cash.\r\n   * @param amount amount of bonds to redeem.\r\n   */\r\n  async redeemBonds(amount: string): Promise<TransactionResponse> {\r\n    const { Treasury } = this.contracts;\r\n    const priceForTomb = await Treasury.getTombPrice();\r\n    return await Treasury.redeemBonds(decimalToBalance(amount), priceForTomb);\r\n  }\r\n\r\n  async redeemForV2(amount: string): Promise<TransactionResponse> {\r\n    const { swapper } = this.contracts;\r\n    return await swapper.exchange(decimalToBalance(amount));\r\n  }\r\n\r\n  async getTotalValueLocked(): Promise<Number> {\r\n    let totalValue = 0;\r\n    for (const bankInfo of Object.values(bankDefinitions)) {\r\n      const pool = this.contracts[bankInfo.contract];\r\n      const token = this.externalTokens[bankInfo.depositTokenName];\r\n      const tokenPrice = await this.getDepositTokenPriceInDollars(bankInfo.depositTokenName, token);\r\n      const tokenAmountInPool = await token.balanceOf(pool.address);\r\n      const value = Number(getDisplayBalance(tokenAmountInPool, token.decimal, 18)) * Number(tokenPrice);\r\n      const poolValue = Number.isNaN(value) ? 0 : value;\r\n      totalValue += poolValue;\r\n    }\r\n\r\n    const PBLPrice = (await this.getPebbleStat()).priceInDollars;\r\n    const masonrypebbleBalanceOf = await this.whale.balanceOf(this.currentMasonry().address);\r\n    const masonryTVL = Number(getDisplayBalance(masonrypebbleBalanceOf, this.whale.decimal)) * Number(PBLPrice);\r\n\r\n    return totalValue + masonryTVL;\r\n  }\r\n\r\n  /**\r\n   * Calculates the price of an LP token\r\n   * Reference https://github.com/DefiDebauchery/discordpricebot/blob/4da3cdb57016df108ad2d0bb0c91cd8dd5f9d834/pricebot/pricebot.py#L150\r\n   * @param lpToken the token under calculation\r\n   * @param token the token pair used as reference (the other one would be FTM in most cases)\r\n   * @param isTomb sanity check for usage of serene token or whale\r\n   * @returns price of the LP token\r\n   */\r\n  async getLPTokenPrice(lpToken: ERC20, token: ERC20, isTomb: boolean): Promise<string> {\r\n    const totalSupply = getFullDisplayBalance(await lpToken.totalSupply(), lpToken.decimal);\r\n    //Get amount of tokenA\r\n    const tokenSupply = getFullDisplayBalance(await token.balanceOf(lpToken.address), token.decimal);\r\n    const stat = isTomb === true ? await this.getSereneV2Stat() : await this.getPebbleStat();\r\n    const priceOfToken = stat.priceInDollars;\r\n    //console.log('priceOfToken', priceOfToken, 'lpToken', lpToken, 'token', token, 'isTomb', isTomb);\r\n    const tokenInLP = Number(tokenSupply) / Number(totalSupply);\r\n    const tokenPrice = (Number(priceOfToken) * tokenInLP * 2) //We multiply by 2 since half the price of the lp token is the price of each piece of the pair. So twice gives the total\r\n      .toString();\r\n    return tokenPrice;\r\n  }\r\n  async getExtraLPTokenPrice(lpToken: ERC20, token1: ERC20, isWETH: Boolean): Promise<string> {\r\n    const totalSupply = getDisplayBalance(await lpToken.totalSupply(), lpToken.decimal, 18);\r\n    //Get amount of tokenA\r\n    const token1Supply = getFullDisplayBalance(await token1.balanceOf(lpToken.address), token1.decimal);\r\n\r\n    \r\n    const priceOfToken = isWETH ? (await this.getWETHPrice()) : 1;\r\n    //console.log('priceOfToken', priceOfToken, 'lpToken', lpToken, 'token', token, 'isTomb', isTomb);\r\n    const tokenInLP = Number(token1Supply) / Number(totalSupply);\r\n    const tokenPrice = (Number(priceOfToken) * tokenInLP * 2) //We multiply by 2 since half the price of the lp token is the price of each piece of the pair. So twice gives the total\r\n      .toString();\r\n    return tokenPrice;\r\n  }\r\n  async getWETHPrice(): Promise<string> {\r\n    const ready = await this.provider.ready;\r\n    if (!ready) return;\r\n    const { WETH, USDC } = this.externalTokens;\r\n    try {\r\n      const fusdt_wftm_lp_pair = this.externalTokens['WETH-USDC-LP'];\r\n      let ftm_amount_BN = await WETH.balanceOf(fusdt_wftm_lp_pair.address);\r\n      let ftm_amount = Number(getFullDisplayBalance(ftm_amount_BN, WETH.decimal));\r\n      let fusdt_amount_BN = await USDC.balanceOf(fusdt_wftm_lp_pair.address);\r\n      let fusdt_amount = Number(getFullDisplayBalance(fusdt_amount_BN, USDC.decimal));\r\n      return (fusdt_amount / ftm_amount).toString();\r\n    } catch (err) {\r\n      console.error(`Failed to fetch token price of WETH: ${err}`);\r\n    }\r\n  }\r\n  // async get23LPTokenPrice(lpToken: ERC20, token: ERC20, isTomb: boolean): Promise<string> {\r\n  //   const totalSupply = getFullDisplayBalance(await lpToken.totalSupply(), lpToken.decimal);\r\n  //   //Get amount of tokenA\r\n  //   const tokenSupply = getFullDisplayBalance(await token.balanceOf(lpToken.address), token.decimal);\r\n  //   const stat = isTomb === true ? await this.get2ombStat() : await this.get3ombStat();\r\n  //   const priceOfToken = stat.priceInDollars;\r\n  //   const tokenInLP = Number(tokenSupply) / Number(totalSupply);\r\n  //   const tokenPrice = (Number(priceOfToken) * tokenInLP * 2) //We multiply by 2 since half the price of the lp token is the price of each piece of the pair. So twice gives the total\r\n  //     .toString();\r\n  //   return tokenPrice;\r\n  // }\r\n\r\n  async getRedLPTokenPrice(lpToken: ERC20, token: ERC20, isTomb: boolean): Promise<string> {\r\n    const totalSupply = getFullDisplayBalance(await lpToken.totalSupply(), lpToken.decimal);\r\n    //Get amount of tokenA\r\n    const tokenSupply = getFullDisplayBalance(await token.balanceOf(lpToken.address), token.decimal);\r\n    const stat = isTomb === true ? await this.getSereneV2Stat() : await this.getPebbleStat();\r\n    const priceOfToken = stat.priceInDollars;\r\n    const tokenInLP = Number(tokenSupply) / Number(totalSupply);\r\n    const tokenPrice = (Number(priceOfToken) * tokenInLP * 2) //We multiply by 2 since half the price of the lp token is the price of each piece of the pair. So twice gives the total\r\n      .toString();\r\n    return tokenPrice;\r\n  }\r\n\r\n  async getV2LPTokenPrice(lpToken: ERC20, token: ERC20, isTomb: boolean): Promise<string> {\r\n    const totalSupply = getFullDisplayBalance(await lpToken.totalSupply(), lpToken.decimal);\r\n    //Get amount of tokenA\r\n    const tokenSupply = getFullDisplayBalance(await token.balanceOf(lpToken.address), token.decimal);\r\n    const stat = await this.getSereneV2Stat();\r\n    const priceOfToken = stat.priceInDollars;\r\n    const tokenInLP = Number(tokenSupply) / Number(totalSupply);\r\n    const tokenPrice = (Number(priceOfToken) * tokenInLP * 2) //We multiply by 2 since half the price of the lp token is the price of each piece of the pair. So twice gives the total\r\n      .toString();\r\n    return tokenPrice;\r\n  }\r\n\r\n  async earnedFromBank(\r\n    poolName: ContractName,\r\n    earnTokenName: String,\r\n    poolId: Number,\r\n    account = this.myAccount,\r\n  ): Promise<BigNumber> {\r\n    const pool = this.contracts[poolName];\r\n    try {\r\n      if (earnTokenName === 'aFish') {\r\n        return await pool.pendingAFISH(poolId, account);\r\n      } else {\r\n        return await pool.pendingShare(poolId, account);\r\n      }\r\n    } catch (err) {\r\n      console.error(`Failed to call earned() on pool ${pool.address}: ${err.stack}`);\r\n      return BigNumber.from(0);\r\n    }\r\n  }\r\n\r\n  async stakedBalanceOnBank(poolName: ContractName, poolId: Number, account = this.myAccount): Promise<BigNumber> {\r\n    const pool = this.contracts[poolName];\r\n    try {\r\n      let userInfo = await pool.userInfo(poolId, account);\r\n      \r\n      return await userInfo.amount;\r\n    } catch (err) {\r\n      console.error(`Failed to call balanceOf() on pool ${pool.address}: ${err.stack}`);\r\n      return BigNumber.from(0);\r\n    }\r\n  }\r\n\r\n  async getWithdrawalFee(poolName: ContractName, poolId: Number, account = this.myAccount): Promise<BigNumber> {\r\n    const pool = this.contracts[poolName];\r\n    try {\r\n      let userInfo = await pool.getWithdrawFeeOf(poolId, account);\r\n      return userInfo;\r\n    } catch (err) {\r\n      console.error(`Failed to call getWithdrawalFeeOf() on pool ${poolId}: ${err.stack}`);\r\n      return BigNumber.from(0);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Deposits token to given pool.\r\n   * @param poolName A name of pool contract.\r\n   * @param amount Number of tokens with decimals applied. (e.g. 1.45 DAI * 10^18)\r\n   * @returns {string} Transaction hash\r\n   */\r\n  async stake(poolName: ContractName, poolId: Number, amount: BigNumber): Promise<TransactionResponse> {\r\n    const pool = this.contracts[poolName];\r\n    return await pool.deposit(poolId, amount);\r\n  }\r\n  async claimVested(): Promise<TransactionResponse> {\r\n    const {VestingContract} = this.contracts;\r\n    return await VestingContract.claimVestedTokens();\r\n  }\r\n\r\n  /**\r\n   * Withdraws token from given pool.\r\n   * @param poolName A name of pool contract.\r\n   * @param amount Number of tokens with decimals applied. (e.g. 1.45 DAI * 10^18)\r\n   * @returns {string} Transaction hash\r\n   */\r\n  async unstake(poolName: ContractName, poolId: Number, amount: BigNumber): Promise<TransactionResponse> {\r\n    const pool = this.contracts[poolName];\r\n    return await pool.withdraw(poolId, amount);\r\n  }\r\n\r\n  /**\r\n   * Transfers earned token reward from given pool to my account.\r\n   */\r\n  async harvest(poolName: ContractName, poolId: Number): Promise<TransactionResponse> {\r\n    const pool = this.contracts[poolName];\r\n    //By passing 0 as the amount, we are asking the contract to only redeem the reward and not the currently staked token\r\n    return await pool.withdraw(poolId, 0);\r\n  }\r\n\r\n  /**\r\n   * Harvests and withdraws deposited tokens from the pool.\r\n   */\r\n  async exit(poolName: ContractName, poolId: Number, account = this.myAccount): Promise<TransactionResponse> {\r\n    const pool = this.contracts[poolName];\r\n    let userInfo = await pool.userInfo(poolId, account);\r\n    return await pool.withdraw(poolId, userInfo.amount);\r\n  }\r\n\r\n  async fetchMasonryVersionOfUser(): Promise<string> {\r\n    return 'latest';\r\n  }\r\n\r\n  currentMasonry(): Contract {\r\n    if (!this.masonryVersionOfUser) {\r\n      //throw new Error('you must unlock the wallet to continue.');\r\n    }\r\n    return this.contracts.Masonry;\r\n  }\r\n\r\n  isOldMasonryMember(): boolean {\r\n    return this.masonryVersionOfUser !== 'latest';\r\n  }\r\n\r\n  async kickPrinter(): Promise<TransactionResponse> {\r\n    const { Treasury } = this.contracts;\r\n    return await Treasury.allocateSeigniorage();\r\n  }\r\n\r\n  async getTokenPriceInUSDC(tokenContract: ERC20): Promise<string> {\r\n    const ready = await this.provider.ready;\r\n    if (!ready) return;\r\n    const { chainId } = this.config;\r\n    const { USDC } = this.config.externalTokens;\r\n\r\n    const usdc = new Token(chainId, USDC[0], USDC[1]);\r\n    const token = new Token(chainId, tokenContract.address, tokenContract.decimal, tokenContract.symbol);\r\n    try {\r\n      const wftmToToken = await Fetcher.fetchPairData(usdc, token, this.provider);\r\n      const priceInBUSD = new Route([wftmToToken], token);\r\n\r\n      return priceInBUSD.midPrice.toFixed(4);\r\n    } catch (err) {\r\n      console.error(`getTokenPriceInUSDC - Failed to fetch token price of ${tokenContract.symbol}: ${err}`);\r\n    }\r\n  }\r\n\r\n  async getTokenPriceFromPancakeswap(tokenContract: ERC20): Promise<string> {\r\n    const ready = await this.provider.ready;\r\n    if (!ready) return;\r\n    const { chainId } = this.config;\r\n    const { FISH } = this.config.externalTokens;\r\n\r\n    const wftm = new Token(chainId, FISH[0], FISH[1]);\r\n    const token = new Token(chainId, tokenContract.address, tokenContract.decimal, tokenContract.symbol);\r\n    try {\r\n      const wftmToToken = await Fetcher.fetchPairData(token, wftm, this.provider);\r\n      const priceInBUSD = new Route([wftmToToken], token);\r\n\r\n      return priceInBUSD.midPrice.toFixed(4);\r\n    } catch (err) {\r\n      console.error(`getTokenPriceFromPancakeswap-Failed to fetch token price of ${tokenContract.symbol}: ${err}`);\r\n    }\r\n  }\r\n\r\n  // async getTokenPriceFromRedemption(tokenContract: ERC20): Promise<string> {\r\n  //   const ready = await this.provider.ready;\r\n  //   if (!ready) return;\r\n  //   const { chainId } = this.config;\r\n  //   const { WFTM } = this.config.externalTokens;\r\n\r\n  //   const wftm = new Token(chainId, WFTM[0], WFTM[1]);\r\n  //   const token = new Token(chainId, tokenContract.address, tokenContract.decimal, tokenContract.symbol);\r\n  //   try {\r\n  //     const wftmToToken = await Fetcher.fetchPairData(wftm, token, this.provider);\r\n  //     const priceInBUSD = new Route([wftmToToken], token);\r\n\r\n  //     return priceInBUSD.midPrice.toFixed(4);\r\n  //   } catch (err) {\r\n  //     console.error(`Failed to fetch token price of ${tokenContract.symbol}: ${err}`);\r\n  //   }\r\n  // }\r\n\r\n  // async getTokenPriceFromSpiritswap(tokenContract: ERC20): Promise<string> {\r\n  //   const ready = await this.provider.ready;\r\n  //   if (!ready) return;\r\n  //   const { chainId } = this.config;\r\n  //   const { WFTM } = this.config.externalTokens;\r\n\r\n  //   const wftm = new TokenSpirit(chainId, WFTM[0], WFTM[1]);\r\n  //   const token = new TokenSpirit(chainId, tokenContract.address, tokenContract.decimal, tokenContract.symbol);\r\n  //   try {\r\n  //     const wftmToToken = await FetcherSpirit.fetchPairData(wftm, token, this.provider);\r\n  //     const priceInBUSD = new RouteSpirit([wftmToToken], token);\r\n\r\n  //     return priceInBUSD.midPrice.toFixed(4);\r\n  //   } catch (err) {\r\n  //     console.error(`Failed to fetch token price of ${tokenContract.symbol}: ${err}`);\r\n  //   }\r\n  // }\r\n\r\n  async geaFishPriceFromLp(): Promise<string> {\r\n    const ready = await this.provider.ready;\r\n    if (!ready) return;\r\n    const { FISH, USDC } = this.externalTokens;\r\n    try {\r\n      const fusdt_wftm_lp_pair = this.externalTokens['FISH-USDC-LP'];\r\n      let ftm_amount_BN = await FISH.balanceOf(fusdt_wftm_lp_pair.address);\r\n      let ftm_amount = Number(getFullDisplayBalance(ftm_amount_BN, FISH.decimal));\r\n      let fusdt_amount_BN = await USDC.balanceOf(fusdt_wftm_lp_pair.address);\r\n      let fusdt_amount = Number(getFullDisplayBalance(fusdt_amount_BN, USDC.decimal));\r\n      return (fusdt_amount / ftm_amount).toString();\r\n    } catch (err) {\r\n      console.error(`Failed to fetch token price of WFTM: ${err}`);\r\n    }\r\n  }\r\n\r\n  async getTokenPriceInFish(tokenContract: ERC20,lpContract: ERC20): Promise<string> {\r\n    const ready = await this.provider.ready;\r\n    if (!ready) return;\r\n    const { FISH, USDC } = this.externalTokens;\r\n    try {\r\n      let tokenAmountS = await tokenContract.balanceOf(lpContract.address);\r\n      let tokenAmount = Number(getFullDisplayBalance(tokenAmountS, tokenContract.decimal));\r\n      let nativeAmountS = await FISH.balanceOf(lpContract.address);\r\n      let nativeAmount = Number(getFullDisplayBalance(nativeAmountS, FISH.decimal));\r\n      return (nativeAmount / tokenAmount).toString();\r\n    } catch (err) {\r\n      console.error(`Failed to fetch token price of WFTM1: ${err}`);\r\n    }\r\n  }\r\n\r\n  // async getWFTMPriceFromPancakeswap(): Promise<string> {\r\n  //   const ready = await this.provider.ready;\r\n  //   if (!ready) return;\r\n  //   const { WFTM, USDC } = this.externalTokens;\r\n  //   try {\r\n  //     const fusdt_wftm_lp_pair = this.externalTokens['WFTM-USDC-LP'];\r\n  //     let ftm_amount_BN = await WFTM.balanceOf(fusdt_wftm_lp_pair.address);\r\n  //     let ftm_amount = Number(getFullDisplayBalance(ftm_amount_BN, WFTM.decimal));\r\n  //     let fusdt_amount_BN = await USDC.balanceOf(fusdt_wftm_lp_pair.address);\r\n  //     let fusdt_amount = Number(getFullDisplayBalance(fusdt_amount_BN, USDC.decimal));\r\n  //     return (fusdt_amount / ftm_amount).toString();\r\n  //   } catch (err) {\r\n  //     console.error(`Failed to fetch token price of WFTM: ${err}`);\r\n  //   }\r\n  // }\r\n\r\n  //===================================================================\r\n  //===================================================================\r\n  //===================== MASONRY METHODS =============================\r\n  //===================================================================\r\n  //===================================================================\r\n\r\n  async getMasonryAPR() {\r\n    const Masonry = this.currentMasonry();\r\n    const latestSnapshotIndex = await Masonry.latestSnapshotIndex();\r\n    const lastHistory = await Masonry.masonryHistory(latestSnapshotIndex);\r\n\r\n    const lastRewardsReceived = lastHistory[1];\r\n\r\n    const PBLPrice = (await this.getPebbleStat()).priceInDollars;\r\n    const SRNPrice = (await this.getSereneV2Stat()).priceInDollars;\r\n    const epochRewardsPerShare = lastRewardsReceived / 1e18;\r\n\r\n    //Mgod formula\r\n    const amountOfRewardsPerDay = epochRewardsPerShare * Number(SRNPrice) * 4;\r\n    const masonrypebbleBalanceOf = await this.whale.balanceOf(Masonry.address);\r\n    const masonryTVL = Number(getDisplayBalance(masonrypebbleBalanceOf, this.whale.decimal)) * Number(PBLPrice);\r\n    const realAPR = ((amountOfRewardsPerDay * 100) / masonryTVL) * 365;\r\n    return realAPR;\r\n  }\r\n\r\n  /**\r\n   * Checks if the user is allowed to retrieve their reward from the Masonry\r\n   * @returns true if user can withdraw reward, false if they can't\r\n   */\r\n  async canUserClaimRewardFromMasonry(): Promise<boolean> {\r\n    const Masonry = this.currentMasonry();\r\n    return await Masonry.canClaimReward(this.myAccount);\r\n  }\r\n\r\n  /**\r\n   * Checks if the user is allowed to retrieve their reward from the Masonry\r\n   * @returns true if user can withdraw reward, false if they can't\r\n   */\r\n  async canUserUnstakeFromMasonry(): Promise<boolean> {\r\n    const Masonry = this.currentMasonry();\r\n    const canWithdraw = await Masonry.canWithdraw(this.myAccount);\r\n    const stakedAmount = await this.getStakedSharesOnMasonry();\r\n    const notStaked = Number(getDisplayBalance(stakedAmount, this.whale.decimal)) === 0;\r\n    const result = notStaked ? true : canWithdraw;\r\n    return result;\r\n  }\r\n\r\n  async timeUntilClaimRewardFromMasonry(): Promise<BigNumber> {\r\n    // const Masonry = this.currentMasonry();\r\n    // const mason = await Masonry.masons(this.myAccount);\r\n    return BigNumber.from(0);\r\n  }\r\n\r\n  async getTotalStakedInMasonry(): Promise<BigNumber> {\r\n    const Masonry = this.currentMasonry();\r\n    return await Masonry.totalSupply();\r\n  }\r\n\r\n  async stakeShareToMasonry(amount: string): Promise<TransactionResponse> {\r\n    if (this.isOldMasonryMember()) {\r\n      throw new Error(\"you're using old boardroom. please withdraw and deposit the whale again.\");\r\n    }\r\n    const Masonry = this.currentMasonry();\r\n    return await Masonry.stake(decimalToBalance(amount));\r\n  }\r\n\r\n  async getStakedSharesOnMasonry(): Promise<BigNumber> {\r\n    const Masonry = this.currentMasonry();\r\n    if (this.masonryVersionOfUser === 'v1') {\r\n      return await Masonry.getPebbleOf(this.myAccount);\r\n    }\r\n    return await Masonry.balanceOf(this.myAccount);\r\n  }\r\n\r\n  async getEarningsOnMasonry(): Promise<BigNumber> {\r\n    const Masonry = this.currentMasonry();\r\n    if (this.masonryVersionOfUser === 'v1') {\r\n      return await Masonry.getCashEarningsOf(this.myAccount);\r\n    }\r\n    return await Masonry.earned(this.myAccount);\r\n  }\r\n\r\n  async withdrawShareFromMasonry(amount: string): Promise<TransactionResponse> {\r\n    const Masonry = this.currentMasonry();\r\n    return await Masonry.withdraw(decimalToBalance(amount));\r\n  }\r\n\r\n  async harvestCashFromMasonry(): Promise<TransactionResponse> {\r\n    const Masonry = this.currentMasonry();\r\n    if (this.masonryVersionOfUser === 'v1') {\r\n      return await Masonry.claimDividends();\r\n    }\r\n    return await Masonry.claimReward();\r\n  }\r\n\r\n  async exitFromMasonry(): Promise<TransactionResponse> {\r\n    const Masonry = this.currentMasonry();\r\n    return await Masonry.exit();\r\n  }\r\n\r\n  async getTreasuryNextAllocationTime(): Promise<AllocationTime> {\r\n    const { Treasury } = this.contracts;\r\n    const nextEpochTimestamp: BigNumber = await Treasury.nextEpochPoint();\r\n    const nextAllocation = new Date(nextEpochTimestamp.mul(1000).toNumber());\r\n    const prevAllocation = new Date(Date.now());\r\n\r\n    return { from: prevAllocation, to: nextAllocation };\r\n  }\r\n  /**\r\n   * This method calculates and returns in a from to to format\r\n   * the period the user needs to wait before being allowed to claim\r\n   * their reward from the masonry\r\n   * @returns Promise<AllocationTime>\r\n   */\r\n  async getUserClaimRewardTime(): Promise<AllocationTime> {\r\n    const { Masonry, Treasury } = this.contracts;\r\n    const nextEpochTimestamp = await Masonry.nextEpochPoint(); //in unix timestamp\r\n    const currentEpoch = await Masonry.epoch();\r\n    const mason = await Masonry.masons(this.myAccount);\r\n    const startTimeEpoch = mason.epochTimerStart;\r\n    const period = await Treasury.PERIOD();\r\n    const periodInHours = period / 60 / 60; // 6 hours, period is displayed in seconds which is 21600\r\n    const rewardLockupEpochs = await Masonry.rewardLockupEpochs();\r\n    const targetEpochForClaimUnlock = Number(startTimeEpoch) + Number(rewardLockupEpochs);\r\n\r\n    const fromDate = new Date(Date.now());\r\n    if (targetEpochForClaimUnlock - currentEpoch <= 0) {\r\n      return { from: fromDate, to: fromDate };\r\n    } else if (targetEpochForClaimUnlock - currentEpoch === 1) {\r\n      const toDate = new Date(nextEpochTimestamp * 1000);\r\n      return { from: fromDate, to: toDate };\r\n    } else {\r\n      const toDate = new Date(nextEpochTimestamp * 1000);\r\n      const delta = targetEpochForClaimUnlock - currentEpoch - 1;\r\n      const endDate = moment(toDate)\r\n        .add(delta * periodInHours, 'hours')\r\n        .toDate();\r\n      return { from: fromDate, to: endDate };\r\n    }\r\n  }\r\n\r\n  /**\r\n   * This method calculates and returns in a from to to format\r\n   * the period the user needs to wait before being allowed to unstake\r\n   * from the masonry\r\n   * @returns Promise<AllocationTime>\r\n   */\r\n  async getUserUnstakeTime(): Promise<AllocationTime> {\r\n    const { Masonry, Treasury } = this.contracts;\r\n    const nextEpochTimestamp = await Masonry.nextEpochPoint();\r\n    const currentEpoch = await Masonry.epoch();\r\n    const mason = await Masonry.masons(this.myAccount);\r\n    const startTimeEpoch = mason.epochTimerStart;\r\n    const period = await Treasury.PERIOD();\r\n    const PeriodInHours = period / 60 / 60;\r\n    const withdrawLockupEpochs = await Masonry.withdrawLockupEpochs();\r\n    const fromDate = new Date(Date.now());\r\n    const targetEpochForClaimUnlock = Number(startTimeEpoch) + Number(withdrawLockupEpochs);\r\n    const stakedAmount = await this.getStakedSharesOnMasonry();\r\n    if (currentEpoch <= targetEpochForClaimUnlock && Number(stakedAmount) === 0) {\r\n      return { from: fromDate, to: fromDate };\r\n    } else if (targetEpochForClaimUnlock - currentEpoch === 1) {\r\n      const toDate = new Date(nextEpochTimestamp * 1000);\r\n      return { from: fromDate, to: toDate };\r\n    } else {\r\n      const toDate = new Date(nextEpochTimestamp * 1000);\r\n      const delta = targetEpochForClaimUnlock - Number(currentEpoch) - 1;\r\n      const endDate = moment(toDate)\r\n        .add(delta * PeriodInHours, 'hours')\r\n        .toDate();\r\n      return { from: fromDate, to: endDate };\r\n    }\r\n  }\r\n\r\n  async watchAssetInMetamask(assetName: string): Promise<boolean> {\r\n    const { ethereum } = window as any;\r\n    if (ethereum && ethereum.networkVersion === config.chainId.toString()) {\r\n      let asset;\r\n      let assetUrl;\r\n      if (assetName === 'aFish') {\r\n        asset = this.aFish;\r\n        assetUrl = 'https://serene.finance/presskit/serene_icon_noBG.png';\r\n      } else if (assetName === 'whale') {\r\n        asset = this.whale;\r\n        assetUrl = 'https://serene.finance/presskit/tshare_icon_noBG.png';\r\n      } else if (assetName === 'bFish') {\r\n        asset = this.whale;\r\n        assetUrl = 'https://serene.finance/presskit/serene_icon_noBG.png';\r\n      }\r\n      await ethereum.request({\r\n        method: 'wallet_watchAsset',\r\n        params: {\r\n          type: 'ERC20',\r\n          options: {\r\n            address: asset.address,\r\n            symbol: asset.symbol,\r\n            decimals: 18,\r\n            image: assetUrl,\r\n          },\r\n        },\r\n      });\r\n    }\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @returns an array of the regulation events till the most up to date epoch\r\n   */\r\n  async listenForRegulationsEvents(): Promise<any> {\r\n    const { Treasury } = this.contracts;\r\n\r\n    const treasuryDaoFundedFilter = Treasury.filters.DaoFundFunded();\r\n    const treasuryDevFundedFilter = Treasury.filters.DevFundFunded();\r\n    const treasuryMasonryFundedFilter = Treasury.filters.MasonryFunded();\r\n\r\n    let masonryFundEvents = await Treasury.queryFilter(treasuryMasonryFundedFilter);\r\n    var events: any[] = [];\r\n    masonryFundEvents.forEach(function callback(value, index) {\r\n      events.push({ epoch: index + 1 });\r\n      events[index].masonryFund = getDisplayBalance(value.args[1]);\r\n    });\r\n    let DEVFundEvents = await Treasury.queryFilter(treasuryDevFundedFilter);\r\n    DEVFundEvents.forEach(function callback(value, index) {\r\n      events[index].devFund = getDisplayBalance(value.args[1]);\r\n    });\r\n    let DAOFundEvents = await Treasury.queryFilter(treasuryDaoFundedFilter);\r\n    DAOFundEvents.forEach(function callback(value, index) {\r\n      events[index].daoFund = getDisplayBalance(value.args[1]);\r\n    });\r\n    return events;\r\n  }\r\n\r\n  async estimateZapIn(tokenName: string, lpName: string, amount: string): Promise<number[]> {\r\n    const { zapper } = this.contracts;\r\n    const lpToken = this.externalTokens[lpName];\r\n    let estimate;\r\n    if (tokenName === FTM_TICKER) {\r\n      estimate = await zapper.estimateZapIn(lpToken.address, SPOOKY_ROUTER_ADDR, parseUnits(amount, 18));\r\n    } else {\r\n      const token = tokenName === SRN_TICKER ? this.FISH : this.whale;\r\n      estimate = await zapper.estimateZapInToken(\r\n        token.address,\r\n        lpToken.address,\r\n        SPOOKY_ROUTER_ADDR,\r\n        parseUnits(amount, 18),\r\n      );\r\n    }\r\n    return [estimate[0] / 1e18, estimate[1] / 1e18];\r\n  }\r\n  async zapIn(tokenName: string, lpName: string, amount: string): Promise<TransactionResponse> {\r\n    const { zapper } = this.contracts;\r\n    const lpToken = this.externalTokens[lpName];\r\n    if (tokenName === FTM_TICKER) {\r\n      let overrides = {\r\n        value: parseUnits(amount, 18),\r\n      };\r\n      return await zapper.zapIn(lpToken.address, SPOOKY_ROUTER_ADDR, this.myAccount, overrides);\r\n    } else {\r\n      const token = tokenName === SRN_TICKER ? this.FISH : this.whale;\r\n      return await zapper.zapInToken(\r\n        token.address,\r\n        parseUnits(amount, 18),\r\n        lpToken.address,\r\n        SPOOKY_ROUTER_ADDR,\r\n        this.myAccount,\r\n      );\r\n    }\r\n  }\r\n}\r\n","import React, { createContext, useEffect, useState } from 'react';\r\nimport { useWallet } from 'use-wallet';\r\nimport SereneFinance from '../../serene-finance';\r\nimport config from '../../config';\r\n\r\nexport interface SereneFinanceContext {\r\n  sereneFinance?: SereneFinance;\r\n}\r\n\r\nexport const Context = createContext<SereneFinanceContext>({ sereneFinance: null });\r\n\r\nexport const SereneFinanceProvider: React.FC = ({ children }) => {\r\n  const { ethereum, account } = useWallet();\r\n  const [sereneFinance, setSereneFinance] = useState<SereneFinance>();\r\n\r\n  useEffect(() => {\r\n    if (!sereneFinance) {\r\n      const serene = new SereneFinance(config);\r\n      if (account) {\r\n        // wallet was unlocked at initialization\r\n        serene.unlockWallet(ethereum, account);\r\n      }\r\n      setSereneFinance(serene);\r\n    } else if (account) {\r\n      sereneFinance.unlockWallet(ethereum, account);\r\n    }\r\n  }, [account, ethereum, sereneFinance]);\r\n\r\n  return <Context.Provider value={{ sereneFinance }}>{children}</Context.Provider>;\r\n};\r\n","import React, { createContext, useCallback, useState } from 'react';\r\nimport styled from 'styled-components';\r\n\r\ninterface ModalsContext {\r\n  content?: React.ReactNode;\r\n  isOpen?: boolean;\r\n  onPresent: (content: React.ReactNode) => void;\r\n  onDismiss: () => void;\r\n}\r\n\r\nexport const Context = createContext<ModalsContext>({\r\n  onPresent: () => {},\r\n  onDismiss: () => {},\r\n});\r\n\r\nconst Modals: React.FC = ({ children }) => {\r\n  const [isOpen, setIsOpen] = useState(false);\r\n  const [content, setContent] = useState<React.ReactNode>();\r\n\r\n  const handlePresent = useCallback(\r\n    (modalContent: React.ReactNode) => {\r\n      setContent(modalContent);\r\n      setIsOpen(true);\r\n    },\r\n    [setContent, setIsOpen],\r\n  );\r\n\r\n  const handleDismiss = useCallback(() => {\r\n    setContent(undefined);\r\n    setIsOpen(false);\r\n  }, [setContent, setIsOpen]);\r\n\r\n  return (\r\n    <Context.Provider\r\n      value={{\r\n        content,\r\n        isOpen,\r\n        onPresent: handlePresent,\r\n        onDismiss: handleDismiss,\r\n      }}\r\n    >\r\n      {children}\r\n      {isOpen && (\r\n        <StyledModalWrapper>\r\n          <StyledModalBackdrop onClick={handleDismiss} />\r\n          {React.isValidElement(content) &&\r\n            React.cloneElement(content, {\r\n              onDismiss: handleDismiss,\r\n            })}\r\n        </StyledModalWrapper>\r\n      )}\r\n    </Context.Provider>\r\n  );\r\n};\r\n\r\nconst StyledModalWrapper = styled.div`\r\n  align-items: center;\r\n  display: flex;\r\n  justify-content: center;\r\n  position: fixed;\r\n  top: 0;\r\n  right: 0;\r\n  bottom: 0;\r\n  left: 0;\r\n`;\r\n\r\nconst StyledModalBackdrop = styled.div`\r\n  background-color: #00000088;\r\n  position: absolute;\r\n  top: 0;\r\n  right: 0;\r\n  bottom: 0;\r\n  left: 0;\r\n`;\r\n\r\nexport default Modals;\r\n","import { Configuration } from './serene-finance/config';\r\nimport { BankInfo } from './serene-finance';\r\n\r\nconst configurations: { [env: string]: Configuration } = {\r\n  development: {\r\n    chainId: 56,\r\n    networkName: 'Binance',\r\n    ftmscanUrl: 'https://bscscan.com/',\r\n    defaultProvider: 'https://bsc-dataseed.binance.org/',\r\n    deployments: require('./serene-finance/deployments/deployments.mainnet.json'),\r\n    externalTokens: {\r\n      WFTM: ['0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2', 18],\r\n      WETH: ['0x82aF49447D8a07e3bd95BD0d56f35241523fBab1', 18],\r\n      USDC: ['0xFF970A61A04b1cA14834A43f5dE4533eBDDB5CC8', 6],\r\n      SERENE: ['0x95d5C32e16E19E0ba9b9A128f63a34a2796fb3df', 18],\r\n      aFish: ['0x443e712c7c5b0a701dadabade2d46ab520d31233', 18],\r\n      \r\n      'SRN-WETH-LP': ['0xBd696eA529180b32e8c67F1888ed51Ac071cb56F', 18],\r\n      'AFISH-FISH-LP': ['0x58b7df02dc664603778e6e214a5651677a3d784a', 18],  // 2000\r\n      'WHALE-FISH-LP': ['0xa59c6fa7a32195e414cb137e73cd5b860deddb48', 18],\r\n\r\n      FISH: ['0xb348b87b23d5977e2948e6f36ca07e1ec94d7328', 18],           // 1000\r\n      'FISH-USDC-LP': ['0x570eab8422160840ce3b7b2be4c71d657659868f', 18], // 1000\r\n      'FISH-WETH-LP': ['0xE0a0ede95abe2072Cc2091d5C193FD86F740E057',18],  // 1000 \r\n      'WETH-USDC-LP': ['0x8Bc2Cd9DAB840231A0Dab5B747b8A6085c4eA459',18],  // 1000\r\n      'WBTC-WETH-LP': ['0xf7C6FFA90E8f240481234fb3fe9E8F60df74ED87',18],  // 1000\r\n      'USDC-DAI-LP': ['0x978DE910e7645fA7861aF89a156D3c86ad09Db79',18],   // 1000\r\n      'FRAX-USDC-LP': ['0x85710698eB1fB588aF3996a268e73938795Bf558',18],  // 1000\r\n      'USDC-USDT-LP': ['0x106AE154e4c24b6e11E70cfee7E075B14a182244',18],  // 1000\r\n    },\r\n    baseLaunchDate: new Date('2021-06-02 13:00:00Z'),\r\n    bondLaunchesAt: new Date('2020-12-03T15:00:00Z'),\r\n    masonryLaunchesAt: new Date('2020-12-11T00:00:00Z'),\r\n    refreshInterval: 2000,\r\n  },\r\n};\r\n\r\nexport const bankDefinitions: { [contractName: string]: BankInfo } = {\r\n  /*\r\n  Explanation:\r\n  name: description of the card\r\n  poolId: the poolId assigned in the contract\r\n  sectionInUI: way to distinguish in which of the 3 pool groups it should be listed\r\n        - 0 = Single asset stake pools\r\n        - 1 = LP asset staking rewarding SRN\r\n        - 2 = LP asset staking rewarding PBL\r\n  contract: the contract name which will be loaded from the deployment.environmnet.json\r\n  depositTokenName : the name of the token to be deposited\r\n  earnTokenName: the rewarded token\r\n  finished: will disable the pool on the UI if set to true\r\n  sort: the order of the pool\r\n  */\r\n  FISHGENPOOL: {\r\n    name: 'Earn AFish by staking Fish',\r\n    poolId: 0,\r\n    sectionInUI: 0,\r\n    contract: 'GenesisPool',\r\n    depositTokenName: 'FISH',\r\n    earnTokenName: 'aFish',\r\n    finished: false,\r\n    sort: 0,\r\n    closedForStaking: false,\r\n  },\r\n  FISHUSDCGENPOOL: {\r\n    name: 'Earn AFish by staking Fish-Usdc LP',\r\n    poolId: 1,\r\n    sectionInUI: 0,\r\n    contract: 'GenesisPool',\r\n    depositTokenName: 'FISH-USDC-LP',\r\n    earnTokenName: 'aFish',\r\n    finished: false,\r\n    sort: 1,\r\n    closedForStaking: false,\r\n  },\r\n  FISHWETHGENPOOL: {\r\n    name: 'Earn AFish by staking Fish-Weth LP',\r\n    poolId: 2,\r\n    sectionInUI: 0,\r\n    contract: 'GenesisPool',\r\n    depositTokenName: 'FISH-WETH-LP',\r\n    earnTokenName: 'aFish',\r\n    finished: false,\r\n    sort: 2,\r\n    closedForStaking: false,\r\n  },\r\n  WETHUSDCGENPOOL: {\r\n    name: 'Earn AFish by staking Weth-Usdc LP',\r\n    poolId: 3,\r\n    sectionInUI: 0,\r\n    contract: 'GenesisPool',\r\n    depositTokenName: 'WETH-USDC-LP',\r\n    earnTokenName: 'aFish',\r\n    finished: false,\r\n    sort: 3,\r\n    closedForStaking: false,\r\n  },\r\n  WBTCWETHGENPOOL: {\r\n    name: 'Earn AFish by staking WBTC-WETH LP',\r\n    poolId: 4,\r\n    sectionInUI: 0,\r\n    contract: 'GenesisPool',\r\n    depositTokenName: 'WBTC-WETH-LP',\r\n    earnTokenName: 'aFish',\r\n    finished: false,\r\n    sort: 4,\r\n    closedForStaking: false,\r\n  },\r\n  USDCDAIGENPOOL: {\r\n    name: 'Earn AFish by staking USDC-DAI LP',\r\n    poolId: 5,\r\n    sectionInUI: 0,\r\n    contract: 'GenesisPool',\r\n    depositTokenName: 'USDC-DAI-LP',\r\n    earnTokenName: 'aFish',\r\n    finished: false,\r\n    sort: 5,\r\n    closedForStaking: false,\r\n  },\r\n  FRAXUSDCGENPOOL: {\r\n    name: 'Earn AFish by staking FRAX-USDC LP',\r\n    poolId: 6,\r\n    sectionInUI: 0,\r\n    contract: 'GenesisPool',\r\n    depositTokenName: 'FRAX-USDC-LP',\r\n    earnTokenName: 'aFish',\r\n    finished: false,\r\n    sort: 6,\r\n    closedForStaking: false,\r\n  },\r\n  USDCUSDTGENPOOL: {\r\n    name: 'Earn AFish by staking USDC-USDT LP',\r\n    poolId: 7,\r\n    sectionInUI: 0,\r\n    contract: 'GenesisPool',\r\n    depositTokenName: 'USDC-USDT-LP',\r\n    earnTokenName: 'aFish',\r\n    finished: false,\r\n    sort: 7,\r\n    closedForStaking: false,\r\n  },\r\n  // AFISHLPGENPOOL: {\r\n  //   name: 'Earn AFish by staking AFish-Fish LP',\r\n  //   poolId: 8,\r\n  //   sectionInUI: 0,\r\n  //   contract: 'GenesisPool',\r\n  //   depositTokenName: 'AFISH-FISH-LP',\r\n  //   earnTokenName: 'aFish',\r\n  //   finished: false,\r\n  //   sort: 1,\r\n  //   closedForStaking: false,\r\n  // },\r\n\r\n  AFISHLPPOOL: {\r\n    name: 'Earn whale by staking AFish-Fish LP',\r\n    poolId: 0,\r\n    sectionInUI: 2,\r\n    contract: 'ShareRewardPool',\r\n    depositTokenName: 'AFISH-FISH-LP',\r\n    earnTokenName: 'whale',\r\n    finished: false,\r\n    sort: 0,\r\n    closedForStaking: false,\r\n  },\r\n  WHALELPGENPOOL: {\r\n    name: 'Earn whale by staking Whale-Fish LP',\r\n    poolId: 1,\r\n    sectionInUI: 2,\r\n    contract: 'ShareRewardPool',\r\n    depositTokenName: 'WHALE-FISH-LP',\r\n    earnTokenName: 'whale',\r\n    finished: false,\r\n    sort: 1,\r\n    closedForStaking: false,\r\n  }\r\n};\r\n\r\nexport default configurations['development'];\r\n","import { createAction } from '@reduxjs/toolkit';\r\n\r\nexport type PopupContent = {\r\n  txn?: {\r\n    hash: string;\r\n    success: boolean;\r\n    summary?: string;\r\n  };\r\n  error?: {\r\n    message: string;\r\n    stack: string;\r\n  };\r\n};\r\n\r\nexport const updateBlockNumber = createAction<{ chainId: number; blockNumber: number }>('app/updateBlockNumber');\r\n\r\nexport const toggleWalletModal = createAction<void>('app/toggleWalletModal');\r\n\r\nexport const toggleSettingsMenu = createAction<void>('app/toggleSettingsMenu');\r\n\r\nexport const addPopup = createAction<{\r\n  key?: string;\r\n  removeAfterMs?: number | null;\r\n  content: PopupContent;\r\n}>('app/addPopup');\r\n\r\nexport const removePopup = createAction<{ key: string }>('app/removePopup');\r\n","import { useEffect, useState } from 'react';\r\nimport config from './../config';\r\n\r\nconst usePromptNetwork = () => {\r\n  const [networkPrompt, setNetworkPrompt] = useState(false);\r\n  const { ethereum } = window as any;\r\n\r\n  /**\r\n   * For more read https://github.com/NoahZinsmeister/web3-react/blob/6737868693adb7e1e28ae80499e19901e9aae45a/example/hooks.ts#L33\r\n   * And https://docs.metamask.io/guide/ethereum-provider.html\r\n   * @param provider ethereum provider in this case is the window.ethereum available due to metamask being installed\r\n   * @returns\r\n   */\r\n  const connectToNetwork = async (provider: any) => {\r\n    const err = await provider.request({\r\n      method: 'wallet_switchEthereumChain',\r\n      params: [\r\n        {\r\n          chainId: `0x${config.chainId.toString(16)}`\r\n        },\r\n      ],\r\n    });\r\n  };\r\n  useEffect(() => {\r\n    if (!networkPrompt) {\r\n      if (ethereum && ethereum.networkVersion !== config.chainId.toString()) {\r\n        connectToNetwork(ethereum);\r\n        setNetworkPrompt(true);\r\n      }\r\n    }\r\n  }, [networkPrompt, ethereum]);\r\n};\r\n\r\nexport default usePromptNetwork;\r\n","import { createReducer } from '@reduxjs/toolkit';\r\nimport {\r\n  addTransaction,\r\n  checkedTransaction,\r\n  clearAllTransactions,\r\n  finalizeTransaction,\r\n  SerializableTransactionReceipt,\r\n} from './actions';\r\n\r\nconst now = () => new Date().getTime();\r\n\r\nexport interface TransactionDetails {\r\n  hash: string;\r\n  approval?: { tokenAddress: string; spender: string };\r\n  summary?: string;\r\n  receipt?: SerializableTransactionReceipt;\r\n  lastCheckedBlockNumber?: number;\r\n  addedTime: number;\r\n  confirmedTime?: number;\r\n  from: string;\r\n}\r\n\r\nexport interface TransactionState {\r\n  [chainId: number]: {\r\n    [txHash: string]: TransactionDetails;\r\n  };\r\n}\r\n\r\nexport const initialState: TransactionState = {};\r\n\r\nexport default createReducer(initialState, (builder) =>\r\n  builder\r\n    .addCase(addTransaction, (transactions, { payload: { chainId, from, hash, approval, summary } }) => {\r\n      if (transactions[chainId]?.[hash]) {\r\n        throw Error('Attempted to add existing transaction.');\r\n      }\r\n      const txs = transactions[chainId] ?? {};\r\n      txs[hash] = { hash, approval, summary, from, addedTime: now() };\r\n      transactions[chainId] = txs;\r\n    })\r\n    .addCase(clearAllTransactions, (transactions, { payload: { chainId } }) => {\r\n      if (!transactions[chainId]) return;\r\n      transactions[chainId] = {};\r\n    })\r\n    .addCase(checkedTransaction, (transactions, { payload: { chainId, hash, blockNumber } }) => {\r\n      const tx = transactions[chainId]?.[hash];\r\n      if (!tx) {\r\n        return;\r\n      }\r\n      if (!tx.lastCheckedBlockNumber) {\r\n        tx.lastCheckedBlockNumber = blockNumber;\r\n      } else {\r\n        tx.lastCheckedBlockNumber = Math.max(blockNumber, tx.lastCheckedBlockNumber);\r\n      }\r\n    })\r\n    .addCase(finalizeTransaction, (transactions, { payload: { hash, chainId, receipt } }) => {\r\n      const tx = transactions[chainId]?.[hash];\r\n      if (!tx) {\r\n        return;\r\n      }\r\n      tx.receipt = receipt;\r\n      tx.confirmedTime = now();\r\n    }),\r\n);\r\n","import { createReducer, nanoid } from '@reduxjs/toolkit';\r\nimport {\r\n  addPopup,\r\n  PopupContent,\r\n  removePopup,\r\n  toggleWalletModal,\r\n  toggleSettingsMenu,\r\n  updateBlockNumber,\r\n} from './actions';\r\n\r\ntype PopupList = Array<{\r\n  key: string;\r\n  show: boolean;\r\n  content: PopupContent;\r\n  removeAfterMs: number | null;\r\n}>;\r\n\r\nexport interface ApplicationState {\r\n  blockNumber: { [chainId: number]: number };\r\n  popupList: PopupList;\r\n  walletModalOpen: boolean;\r\n  settingsMenuOpen: boolean;\r\n}\r\n\r\nconst initialState: ApplicationState = {\r\n  blockNumber: {},\r\n  popupList: [],\r\n  walletModalOpen: false,\r\n  settingsMenuOpen: false,\r\n};\r\n\r\nexport default createReducer(initialState, (builder) =>\r\n  builder\r\n    .addCase(updateBlockNumber, (state, action) => {\r\n      const { chainId, blockNumber } = action.payload;\r\n      if (typeof state.blockNumber[chainId] !== 'number') {\r\n        state.blockNumber[chainId] = blockNumber;\r\n      } else {\r\n        state.blockNumber[chainId] = Math.max(blockNumber, state.blockNumber[chainId]);\r\n      }\r\n    })\r\n    .addCase(toggleWalletModal, (state) => {\r\n      state.walletModalOpen = !state.walletModalOpen;\r\n    })\r\n    .addCase(toggleSettingsMenu, (state) => {\r\n      state.settingsMenuOpen = !state.settingsMenuOpen;\r\n    })\r\n    .addCase(addPopup, (state, { payload: { content, key, removeAfterMs = 15000 } }) => {\r\n      state.popupList = (key ? state.popupList.filter((popup) => popup.key !== key) : state.popupList).concat([\r\n        {\r\n          key: key || nanoid(),\r\n          show: true,\r\n          content,\r\n          removeAfterMs,\r\n        },\r\n      ]);\r\n    })\r\n    .addCase(removePopup, (state, { payload: { key } }) => {\r\n      state.popupList.forEach((p) => {\r\n        if (p.key === key) {\r\n          p.show = false;\r\n        }\r\n      });\r\n    }),\r\n);\r\n","import { configureStore, getDefaultMiddleware } from '@reduxjs/toolkit';\r\nimport { save, load } from 'redux-localstorage-simple';\r\nimport transactions from './transactions/reducer';\r\nimport application from './application/reducer';\r\n\r\nconst PERSISTED_KEYS: string[] = ['transactions'];\r\n\r\nconst store = configureStore({\r\n  reducer: {\r\n    application,\r\n    transactions,\r\n  },\r\n  middleware: [...getDefaultMiddleware({ thunk: false }), save({ states: PERSISTED_KEYS })],\r\n  preloadedState: load({ states: PERSISTED_KEYS }),\r\n});\r\n\r\nexport default store;\r\n\r\nexport type AppState = ReturnType<typeof store.getState>;\r\nexport type AppDispatch = typeof store.dispatch;\r\n","export const white = '#FFF';\r\nexport const black = '#000';\r\n\r\nexport const green = {\r\n  500: '#00D110',\r\n};\r\n\r\nexport const purple = {\r\n  200: '#bd7cfe',\r\n  400: '#ab47bc',\r\n  700: '#7b1fa2',\r\n};\r\n\r\nexport const red = {\r\n  100: '#C1C1FF',\r\n  200: '#7575FF',\r\n  500: '#9090FF',\r\n};\r\n\r\nexport const grey = {\r\n  100: '#f5f5f5',\r\n  200: '#eeeeee',\r\n  300: '#e0e0e0',\r\n  400: '#bdbdbd',\r\n  500: '#9e9e9e',\r\n  600: '#757575',\r\n  700: '#616161',\r\n  800: '#424242',\r\n  900: '#212121',\r\n};\r\n\r\nexport const bg = '#000000';\r\n\r\nexport const teal = {\r\n  200: '#64ffda',\r\n};\r\n","import { black, purple, teal, grey, red, white } from './colors';\r\n\r\nconst theme = {\r\n  borderRadius: 12,\r\n  color: {\r\n    black,\r\n    grey,\r\n    purple,\r\n    primary: {\r\n      light: red[200],\r\n      main: red[500],\r\n    },\r\n    secondary: {\r\n      main: teal[200],\r\n    },\r\n    white,\r\n    teal,\r\n  },\r\n  \r\n  siteWidth: 1200,\r\n  spacing: {\r\n    1: 4,\r\n    2: 8,\r\n    3: 16,\r\n    4: 24,\r\n    5: 32,\r\n    6: 48,\r\n    7: 64,\r\n  },\r\n  topBarSize: 72,\r\n\r\n};\r\n\r\nexport default theme;\r\n","//Your theme for the new stuff using material UI has been copied here so it doesn't conflict\r\nimport { createMuiTheme } from '@material-ui/core/styles';\r\n\r\nconst newTheme = createMuiTheme({\r\n  palette: {\r\n    type: 'dark',\r\n    text: {\r\n      primary: '#000',\r\n    },\r\n    background: {\r\n      default: '#121212',\r\n      paper: '#CBCBCB80',\r\n    },\r\n    primary: {\r\n      light: '#453f80',\r\n      main: '#fff',\r\n      dark: '#00C2FF',\r\n      contrastText: '#555',\r\n    },\r\n    secondary: {\r\n      light: '#ff7961',\r\n      main: '#f44336',\r\n      dark: '#ba000d',\r\n      contrastText: '#000',\r\n    },\r\n    action: {\r\n      disabledBackground: '#CDCDCD',\r\n      active: '#000',\r\n      hover: '#000',\r\n    },\r\n  },\r\n  typography: {\r\n    color: '#fff',\r\n    fontFamily: ['\"Roboto\"', 'sans-serif'].join(','),\r\n  },\r\n});\r\n\r\nexport default newTheme;\r\n","import { useCallback, useEffect, useState } from 'react';\r\n\r\nconst VISIBILITY_STATE_SUPPORTED = 'visibilityState' in document;\r\n\r\nfunction isWindowVisible() {\r\n  return !VISIBILITY_STATE_SUPPORTED || document.visibilityState !== 'hidden';\r\n}\r\n\r\n/**\r\n * Returns whether the window is currently visible to the user.\r\n */\r\nexport default function useIsWindowVisible(): boolean {\r\n  const [focused, setFocused] = useState<boolean>(isWindowVisible());\r\n  const listener = useCallback(() => {\r\n    setFocused(isWindowVisible());\r\n  }, [setFocused]);\r\n\r\n  useEffect(() => {\r\n    if (!VISIBILITY_STATE_SUPPORTED) return undefined;\r\n\r\n    document.addEventListener('visibilitychange', listener);\r\n    return () => {\r\n      document.removeEventListener('visibilitychange', listener);\r\n    };\r\n  }, [listener]);\r\n\r\n  return focused;\r\n}\r\n","import { useCallback, useEffect, useState } from 'react';\r\nimport { useDispatch } from 'react-redux';\r\nimport { useWallet } from 'use-wallet';\r\nimport useDebounce from '../../hooks/useDebounce';\r\nimport useIsWindowVisible from '../../hooks/useIsWindowVisible';\r\nimport { updateBlockNumber } from './actions';\r\nimport { getDefaultProvider } from '../../utils/provider';\r\n\r\nexport default function Updater(): null {\r\n  const { ethereum, chainId } = useWallet();\r\n\r\n  const dispatch = useDispatch();\r\n\r\n  const windowVisible = useIsWindowVisible();\r\n\r\n  const [state, setState] = useState<{\r\n    chainId: number | undefined;\r\n    blockNumber: number | null;\r\n  }>({\r\n    chainId,\r\n    blockNumber: null,\r\n  });\r\n\r\n  const blockNumberCallback = useCallback(\r\n    (blockNumber: number) => {\r\n      setState((state) => {\r\n        if (chainId === state.chainId) {\r\n          if (typeof state.blockNumber !== 'number') return { chainId, blockNumber };\r\n          return { chainId, blockNumber: Math.max(blockNumber, state.blockNumber) };\r\n        }\r\n        return state;\r\n      });\r\n    },\r\n    [chainId, setState],\r\n  );\r\n\r\n  // attach/detach listeners\r\n  // @ts-ignore\r\n  useEffect(() => {\r\n    if (!ethereum || !chainId || !windowVisible) return undefined;\r\n    setState({ chainId, blockNumber: null });\r\n\r\n    const provider = getDefaultProvider();\r\n    provider\r\n      .getBlockNumber()\r\n      .then(blockNumberCallback)\r\n      .catch((error) => console.error(`Failed to get block number for chainId: ${chainId}`, error));\r\n\r\n    provider.on('block', blockNumberCallback);\r\n    return () => provider.removeListener('block', blockNumberCallback);\r\n  }, [dispatch, chainId, ethereum, blockNumberCallback, windowVisible]);\r\n\r\n  const debouncedState = useDebounce(state, 100);\r\n\r\n  useEffect(() => {\r\n    if (!debouncedState.chainId || !debouncedState.blockNumber || !windowVisible) return;\r\n    dispatch(\r\n      updateBlockNumber({\r\n        chainId: debouncedState.chainId,\r\n        blockNumber: debouncedState.blockNumber,\r\n      }),\r\n    );\r\n  }, [windowVisible, dispatch, debouncedState.blockNumber, debouncedState.chainId]);\r\n\r\n  return null;\r\n}\r\n","import { useEffect, useState } from 'react';\r\n\r\n// modified from https://usehooks.com/useDebounce/\r\nexport default function useDebounce<T>(value: T, delay: number): T {\r\n  const [debouncedValue, setDebouncedValue] = useState<T>(value);\r\n\r\n  useEffect(() => {\r\n    // Update debounced value after delay\r\n    const handler = setTimeout(() => {\r\n      setDebouncedValue(value);\r\n    }, delay);\r\n\r\n    // Cancel the timeout if value changes (also on delay change or unmount)\r\n    // This is how we prevent debounced value from updating if value is changed ...\r\n    // .. within the delay period. Timeout gets cleared and restarted.\r\n    return () => {\r\n      clearTimeout(handler);\r\n    };\r\n  }, [value, delay]);\r\n\r\n  return debouncedValue;\r\n}\r\n","import { useEffect } from 'react';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { useWallet } from 'use-wallet';\r\nimport { useAddPopup, useBlockNumber } from '../application/hooks';\r\nimport { AppDispatch, AppState } from '../index';\r\nimport { checkedTransaction, finalizeTransaction } from './actions';\r\nimport { getDefaultProvider } from '../../utils/provider';\r\n\r\nexport function shouldCheck(\r\n  lastBlockNumber: number,\r\n  tx: { addedTime: number; receipt?: {}; lastCheckedBlockNumber?: number },\r\n): boolean {\r\n  if (tx.receipt) return false;\r\n  if (!tx.lastCheckedBlockNumber) return true;\r\n  const blocksSinceCheck = lastBlockNumber - tx.lastCheckedBlockNumber;\r\n  if (blocksSinceCheck < 1) return false;\r\n  const minutesPending = (new Date().getTime() - tx.addedTime) / 1000 / 60;\r\n  if (minutesPending > 60) {\r\n    // every 10 blocks if pending for longer than an hour\r\n    return blocksSinceCheck > 9;\r\n  } else if (minutesPending > 5) {\r\n    // every 3 blocks if pending more than 5 minutes\r\n    return blocksSinceCheck > 2;\r\n  } else {\r\n    // otherwise every block\r\n    return true;\r\n  }\r\n}\r\n\r\nexport default function Updater(): null {\r\n  const { chainId, ethereum } = useWallet();\r\n\r\n  const lastBlockNumber = useBlockNumber();\r\n\r\n  const dispatch = useDispatch<AppDispatch>();\r\n  const state = useSelector<AppState, AppState['transactions']>((state) => state.transactions);\r\n\r\n  const transactions = chainId ? state[chainId] ?? {} : {};\r\n\r\n  // show popup on confirm\r\n  const addPopup = useAddPopup();\r\n\r\n  useEffect(() => {\r\n    if (!chainId || !ethereum || !lastBlockNumber) {\r\n      return;\r\n    }\r\n\r\n    const provider = getDefaultProvider();\r\n    Object.keys(transactions)\r\n      .filter((hash) => shouldCheck(lastBlockNumber, transactions[hash]))\r\n      .forEach((hash) => {\r\n        provider\r\n          .getTransactionReceipt(hash)\r\n          .then((receipt) => {\r\n            if (receipt) {\r\n              dispatch(\r\n                finalizeTransaction({\r\n                  chainId,\r\n                  hash,\r\n                  receipt: {\r\n                    blockHash: receipt.blockHash,\r\n                    blockNumber: receipt.blockNumber,\r\n                    contractAddress: receipt.contractAddress,\r\n                    from: receipt.from,\r\n                    status: receipt.status,\r\n                    to: receipt.to,\r\n                    transactionHash: receipt.transactionHash,\r\n                    transactionIndex: receipt.transactionIndex,\r\n                  },\r\n                }),\r\n              );\r\n\r\n              addPopup(\r\n                {\r\n                  txn: {\r\n                    hash,\r\n                    success: receipt.status === 1,\r\n                    summary: transactions[hash]?.summary,\r\n                  },\r\n                },\r\n                hash,\r\n              );\r\n            } else {\r\n              dispatch(checkedTransaction({ chainId, hash, blockNumber: lastBlockNumber }));\r\n            }\r\n          })\r\n          .catch((error) => {\r\n            console.error(`failed to check transaction hash: ${hash}`, error);\r\n          });\r\n      });\r\n  }, [chainId, ethereum, transactions, lastBlockNumber, dispatch, addPopup]);\r\n\r\n  return null;\r\n}\r\n","import React from 'react';\r\nimport ApplicationUpdater from './application/updater';\r\nimport TransactionUpdater from './transactions/updater';\r\n\r\nconst Updaters = () => (\r\n  <>\r\n    <ApplicationUpdater />\r\n    <TransactionUpdater />\r\n  </>\r\n);\r\n\r\nexport default Updaters;\r\n","import Loader from './Loader';\r\n\r\nexport default Loader;\r\n","import React from 'react';\r\nimport Typography from '@material-ui/core/Typography';\r\n\r\nconst Loader = () => {\r\n  return (\r\n    <div\r\n      style={{\r\n        position: 'absolute',\r\n        left: '50%',\r\n        top: '50%',\r\n        transform: 'translate(-50%, -50%)',\r\n      }}\r\n    >\r\n      <Typography>Loading</Typography>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Loader;\r\n","import React, { useContext } from 'react';\r\nimport { AlertCircle, CheckCircle } from 'react-feather';\r\nimport styled, { ThemeContext } from 'styled-components';\r\nimport { useWallet } from 'use-wallet';\r\nimport config from '../../config';\r\n\r\nconst RowNoFlex = styled.div`\r\n  flex-wrap: nowrap;\r\n`;\r\n\r\nexport default function TransactionPopup({\r\n  hash,\r\n  success,\r\n  summary,\r\n}: {\r\n  hash: string;\r\n  success?: boolean;\r\n  summary?: string;\r\n}) {\r\n  const { chainId } = useWallet();\r\n  const theme = useContext(ThemeContext);\r\n\r\n  return (\r\n    <RowNoFlex>\r\n      <div style={{ paddingRight: 16 }}>\r\n        {success ? <CheckCircle color={theme.color.teal[200]} size={24} /> : <AlertCircle color=\"#FF6871\" size={24} />}\r\n      </div>\r\n      <div>\r\n        <StyledPopupDesc>{summary ?? 'Hash: ' + hash.slice(0, 8) + '...' + hash.slice(58, 65)}</StyledPopupDesc>\r\n        {chainId && (\r\n          <StyledLink target=\"_blank\" href={`${config.ftmscanUrl}/tx/${hash}`}>\r\n            View on explorer\r\n          </StyledLink>\r\n        )}\r\n      </div>\r\n    </RowNoFlex>\r\n  );\r\n}\r\n\r\nconst StyledPopupDesc = styled.span`\r\n  font-weight: 500;\r\n  color: ${(props) => props.theme.color.grey[300]};\r\n`;\r\n\r\nconst StyledLink = styled.a`\r\n  color: ${(props) => props.theme.color.grey[500]};\r\n`;\r\n","import React, { useCallback } from 'react';\r\nimport { AlertCircle } from 'react-feather';\r\nimport styled from 'styled-components';\r\n\r\nconst RowNoFlex = styled.div`\r\n  flex-wrap: nowrap;\r\n`;\r\n\r\nexport default function ErrorPopup({ message, stack }: { message: string; stack: string }) {\r\n  const copyErrorDetails = useCallback(async () => {\r\n    await navigator.clipboard.writeText(`${message}\\n${stack}`);\r\n  }, [message, stack]);\r\n\r\n  return (\r\n    <RowNoFlex>\r\n      <div style={{ paddingRight: 16 }}>\r\n        <AlertCircle color=\"#FF6871\" size={24} />\r\n      </div>\r\n      <div>\r\n        <StyledPopupDesc>{message}</StyledPopupDesc>\r\n        <StyledLink onClick={copyErrorDetails} href=\"#\">\r\n          Copy error details\r\n        </StyledLink>\r\n      </div>\r\n    </RowNoFlex>\r\n  );\r\n}\r\n\r\nconst StyledPopupDesc = styled.span`\r\n  font-weight: 500;\r\n  color: ${(props) => props.theme.color.grey[300]};\r\n`;\r\n\r\nconst StyledLink = styled.a`\r\n  color: ${(props) => props.theme.color.grey[500]};\r\n`;\r\n","import React, { useCallback, useContext, useEffect } from 'react';\r\nimport { X } from 'react-feather';\r\nimport { useSpring } from 'react-spring/web';\r\nimport styled, { ThemeContext } from 'styled-components';\r\nimport { animated } from 'react-spring';\r\nimport { PopupContent } from '../../state/application/actions';\r\nimport { useRemovePopup } from '../../state/application/hooks';\r\nimport TransactionPopup from './TransactionPopup';\r\nimport ErrorPopup from './ErrorPopup';\r\n\r\nexport const StyledClose = styled(X)`\r\n  position: absolute;\r\n  right: 10px;\r\n  top: 10px;\r\n\r\n  :hover {\r\n    cursor: pointer;\r\n  }\r\n`;\r\nexport const Popup = styled.div`\r\n  display: inline-block;\r\n  width: 100%;\r\n  padding: 1em;\r\n  background-color: ${({ theme }) => theme.color.grey[700]};\r\n  position: relative;\r\n  border-radius: 10px;\r\n  padding: 20px;\r\n  padding-right: 35px;\r\n  overflow: hidden;\r\n\r\n  @media (max-width: 768px) {\r\n    min-width: 290px;\r\n  }\r\n`;\r\nconst Fader = styled.div`\r\n  position: absolute;\r\n  bottom: 0px;\r\n  left: 0px;\r\n  width: 100%;\r\n  height: 2px;\r\n  background-color: ${({ theme }) => theme.color.grey[400]};\r\n`;\r\n\r\nconst AnimatedFader = animated(Fader);\r\n\r\nexport default function PopupItem({\r\n  removeAfterMs,\r\n  content,\r\n  popKey,\r\n}: {\r\n  removeAfterMs: number | null;\r\n  content: PopupContent;\r\n  popKey: string;\r\n}) {\r\n  const removePopup = useRemovePopup();\r\n  const removeThisPopup = useCallback(() => removePopup(popKey), [popKey, removePopup]);\r\n  useEffect(() => {\r\n    if (removeAfterMs === null) return undefined;\r\n\r\n    const timeout = setTimeout(() => {\r\n      removeThisPopup();\r\n    }, removeAfterMs);\r\n\r\n    return () => {\r\n      clearTimeout(timeout);\r\n    };\r\n  }, [removeAfterMs, removeThisPopup]);\r\n\r\n  const theme = useContext(ThemeContext);\r\n\r\n  let popupContent;\r\n  if ('txn' in content) {\r\n    const {\r\n      txn: { hash, success, summary },\r\n    } = content;\r\n    popupContent = <TransactionPopup hash={hash} success={success} summary={summary} />;\r\n  }\r\n  if ('error' in content) {\r\n    const {\r\n      error: { message, stack },\r\n    } = content;\r\n    popupContent = <ErrorPopup message={message} stack={stack} />;\r\n  }\r\n\r\n  const faderStyle = useSpring({\r\n    from: { width: '100%' },\r\n    to: { width: '0%' },\r\n    config: { duration: removeAfterMs ?? undefined },\r\n  });\r\n\r\n  return (\r\n    <Popup>\r\n      <StyledClose color={theme.text2} onClick={removeThisPopup} />\r\n      {popupContent}\r\n      {removeAfterMs !== null ? <AnimatedFader style={faderStyle} /> : null}\r\n    </Popup>\r\n  );\r\n}\r\n","import React from 'react';\r\nimport styled from 'styled-components';\r\nimport { useActivePopups } from '../../state/application/hooks';\r\nimport PopupItem from './PopupItem';\r\n\r\nconst MobilePopupWrapper = styled.div<{ height: string | number }>`\r\n  position: relative;\r\n  max-width: 100%;\r\n  height: ${({ height }) => height};\r\n  margin: ${({ height }) => (height ? '0 auto;' : 0)};\r\n  margin-bottom: ${({ height }) => (height ? '20px' : 0)}};\r\n\r\n  display: none;\r\n  @media (max-width: 768px) {\r\n    display: block;\r\n  };\r\n`;\r\n\r\nconst MobilePopupInner = styled.div`\r\n  height: 99%;\r\n  overflow-x: auto;\r\n  overflow-y: hidden;\r\n  display: flex;\r\n  flex-direction: row;\r\n  -webkit-overflow-scrolling: touch;\r\n  ::-webkit-scrollbar {\r\n    display: none;\r\n  }\r\n`;\r\n\r\nconst FixedPopupColumn = styled.div`\r\n  position: fixed;\r\n  top: 64px;\r\n  margin-right: 24px;\r\n  right: 3rem;\r\n  max-width: 355px !important;\r\n  width: 100%;\r\n  z-index: 2;\r\n\r\n  @media (max-width: 768px) {\r\n    display: none;\r\n  } ;\r\n`;\r\n\r\nexport default function Popups() {\r\n  // get all popups\r\n  const activePopups = useActivePopups();\r\n\r\n  return (\r\n    <>\r\n      <FixedPopupColumn>\r\n        {activePopups.map((item) => (\r\n          <PopupItem key={item.key} content={item.content} popKey={item.key} removeAfterMs={item.removeAfterMs} />\r\n        ))}\r\n      </FixedPopupColumn>\r\n      <MobilePopupWrapper height={activePopups?.length > 0 ? 'fit-content' : 0}>\r\n        <MobilePopupInner>\r\n          {activePopups // reverse so new items up front\r\n            .slice(0)\r\n            .reverse()\r\n            .map((item) => (\r\n              <PopupItem key={item.key} content={item.content} popKey={item.key} removeAfterMs={item.removeAfterMs} />\r\n            ))}\r\n        </MobilePopupInner>\r\n      </MobilePopupWrapper>\r\n    </>\r\n  );\r\n}\r\n","import React, { Suspense, lazy } from 'react';\r\nimport { Provider } from 'react-redux';\r\nimport { BrowserRouter as Router, Route, Switch } from 'react-router-dom';\r\nimport { ThemeProvider as TP } from '@material-ui/core/styles';\r\nimport { ThemeProvider as TP1 } from 'styled-components';\r\nimport { UseWalletProvider } from 'use-wallet';\r\nimport usePromptNetwork from './hooks/useNetworkPrompt';\r\nimport BanksProvider from './contexts/Banks';\r\nimport SereneFinanceProvider from './contexts/SereneFinance';\r\nimport ModalsProvider from './contexts/Modals';\r\nimport store from './state';\r\nimport theme from './theme';\r\nimport newTheme from './newTheme';\r\nimport config from './config';\r\nimport Updaters from './state/Updaters';\r\nimport Loader from './components/Loader';\r\nimport Popups from './components/Popups';\r\n\r\nconst Home = lazy(() => import('./views/Home'));\r\n\r\nconst NoMatch = () => (\r\n  <h3 style={{ position: 'absolute', top: '50%', left: '50%', transform: 'translate(-50%, -50%)' }}>\r\n    URL Not Found. <a href=\"/\">Go back home.</a>\r\n  </h3>\r\n);\r\n\r\nconst App: React.FC = () => {\r\n  // Clear localStorage for mobile users\r\n  if (typeof localStorage.version_app === 'undefined' || localStorage.version_app !== '1.0') {\r\n    localStorage.clear();\r\n    localStorage.setItem('connectorId', '');\r\n    localStorage.setItem('version_app', '1.0');\r\n  }\r\n\r\n  usePromptNetwork();\r\n\r\n  return (\r\n    <Providers>\r\n      <Router>\r\n        <Suspense fallback={<Loader />}>\r\n          \r\n              <Home />\r\n          \r\n        </Suspense>\r\n      </Router>\r\n    </Providers>\r\n  );\r\n};\r\n\r\nconst Providers: React.FC = ({ children }) => {\r\n  return (\r\n    <TP1 theme={theme}>\r\n      <TP theme={newTheme}>\r\n        <UseWalletProvider\r\n          chainId={config.chainId}\r\n          connectors={{\r\n            walletconnect: { rpcUrl: config.defaultProvider },\r\n          }}\r\n        >\r\n          <Provider store={store}>\r\n            <Updaters />\r\n            <SereneFinanceProvider>\r\n              <ModalsProvider>\r\n                {/* <BanksProvider> */}\r\n                  <>\r\n                    <Popups />\r\n                    {children}\r\n                  </>\r\n                {/* </BanksProvider> */}\r\n              </ModalsProvider>\r\n            </SereneFinanceProvider>\r\n          </Provider>\r\n        </UseWalletProvider>\r\n      </TP>\r\n    </TP1>\r\n  );\r\n};\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/),\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA',\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then((registration) => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.',\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch((error) => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then((response) => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (response.status === 404 || (contentType != null && contentType.indexOf('javascript') === -1)) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then((registration) => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log('No internet connection found. App is running in offline mode.');\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then((registration) => {\r\n        registration.unregister();\r\n      })\r\n      .catch((error) => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root'),\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n","import { createAction } from '@reduxjs/toolkit';\r\nimport { ChainId } from '@traderjoe-xyz/sdk';\r\n\r\nexport interface SerializableTransactionReceipt {\r\n  to: string;\r\n  from: string;\r\n  contractAddress: string;\r\n  transactionIndex: number;\r\n  blockHash: string;\r\n  transactionHash: string;\r\n  blockNumber: number;\r\n  status?: number;\r\n}\r\n\r\nexport const addTransaction = createAction<{\r\n  chainId: ChainId;\r\n  hash: string;\r\n  from: string;\r\n  approval?: { tokenAddress: string; spender: string };\r\n  summary?: string;\r\n}>('transactions/addTransaction');\r\n\r\nexport const clearAllTransactions = createAction<{ chainId: ChainId }>('transactions/clearAllTransactions');\r\n\r\nexport const finalizeTransaction = createAction<{\r\n  chainId: ChainId;\r\n  hash: string;\r\n  receipt: SerializableTransactionReceipt;\r\n}>('transactions/finalizeTransaction');\r\n\r\nexport const checkedTransaction = createAction<{\r\n  chainId: ChainId;\r\n  hash: string;\r\n  blockNumber: number;\r\n}>('transactions/checkedTransaction');\r\n","import { Deployments } from './deployments';\r\nimport { ChainId } from '@traderjoe-xyz/sdk';\r\n\r\nexport type Configuration = {\r\n  chainId: ChainId;\r\n  networkName: string;\r\n  ftmscanUrl: string;\r\n  defaultProvider: string;\r\n  deployments: Deployments;\r\n  externalTokens: { [contractName: string]: [string, number] };\r\n  config?: EthereumConfig;\r\n\r\n  baseLaunchDate: Date;\r\n  bondLaunchesAt: Date;\r\n  masonryLaunchesAt: Date;\r\n\r\n  refreshInterval: number;\r\n};\r\n\r\nexport type EthereumConfig = {\r\n  testing: boolean;\r\n  autoGasMultiplier: number;\r\n  defaultConfirmations: number;\r\n  defaultGas: string;\r\n  defaultGasPrice: string;\r\n  ethereumNodeTimeout: number;\r\n};\r\n\r\nexport const defaultEthereumConfig = {\r\n  testing: false,\r\n  autoGasMultiplier: 1.5,\r\n  defaultConfirmations: 1,\r\n  defaultGas: '6000000',\r\n  defaultGasPrice: '1000000000000',\r\n  ethereumNodeTimeout: 10000,\r\n};\r\n","import Web3 from 'web3';\r\nimport { defaultEthereumConfig, EthereumConfig } from './config';\r\nimport { formatUnits, parseUnits } from 'ethers/lib/utils';\r\nimport { BigNumber } from 'ethers';\r\n\r\nexport function web3ProviderFrom(endpoint: string, config?: EthereumConfig): any {\r\n  const ethConfig = Object.assign(defaultEthereumConfig, config || {});\r\n\r\n  const providerClass = endpoint.includes('wss') ? Web3.providers.WebsocketProvider : Web3.providers.HttpProvider;\r\n\r\n  return new providerClass(endpoint, {\r\n    timeout: ethConfig.ethereumNodeTimeout,\r\n  });\r\n}\r\n\r\nexport function balanceToDecimal(s: string): string {\r\n  return formatUnits(s);\r\n}\r\n\r\nexport function decimalToBalance(d: string | number, decimals = 18): BigNumber {\r\n  return parseUnits(String(d), decimals);\r\n}\r\n","import { useCallback, useMemo } from 'react';\r\nimport { addPopup, PopupContent, removePopup, toggleWalletModal, toggleSettingsMenu } from './actions';\r\nimport { useSelector, useDispatch } from 'react-redux';\r\nimport { AppState } from '../index';\r\nimport { useWallet } from 'use-wallet';\r\n\r\nexport function useBlockNumber(): number | undefined {\r\n  const { chainId } = useWallet();\r\n  return useSelector((state: AppState) => state.application.blockNumber[chainId ?? -1]);\r\n}\r\n\r\nexport function useWalletModalOpen(): boolean {\r\n  return useSelector((state: AppState) => state.application.walletModalOpen);\r\n}\r\n\r\nexport function useWalletModalToggle(): () => void {\r\n  const dispatch = useDispatch();\r\n  return useCallback(() => dispatch(toggleWalletModal()), [dispatch]);\r\n}\r\n\r\nexport function useSettingsMenuOpen(): boolean {\r\n  return useSelector((state: AppState) => state.application.settingsMenuOpen);\r\n}\r\n\r\nexport function useToggleSettingsMenu(): () => void {\r\n  const dispatch = useDispatch();\r\n  return useCallback(() => dispatch(toggleSettingsMenu()), [dispatch]);\r\n}\r\n\r\n// returns a function that allows adding a popup\r\nexport function useAddPopup(): (content: PopupContent, key?: string) => void {\r\n  const dispatch = useDispatch();\r\n\r\n  return useCallback(\r\n    (content: PopupContent, key?: string) => {\r\n      dispatch(addPopup({ content, key }));\r\n    },\r\n    [dispatch],\r\n  );\r\n}\r\n\r\n// returns a function that allows removing a popup via its key\r\nexport function useRemovePopup(): (key: string) => void {\r\n  const dispatch = useDispatch();\r\n  return useCallback(\r\n    (key: string) => {\r\n      dispatch(removePopup({ key }));\r\n    },\r\n    [dispatch],\r\n  );\r\n}\r\n\r\n// get the list of active popups\r\nexport function useActivePopups(): AppState['application']['popupList'] {\r\n  const list = useSelector((state: AppState) => state.application.popupList);\r\n  return useMemo(() => list.filter((item) => item.show), [list]);\r\n}\r\n"],"sourceRoot":""}